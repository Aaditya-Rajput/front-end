[{"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\index.js":"1","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\App.js":"2","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\reportWebVitals.js":"4","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\polyfills.js":"5","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\initNewLanguage.js":"6","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\api-routes.js":"7","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\i18n.js":"8","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\localStorage.js":"9","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\index.js":"10","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\axios\\axios.js":"11","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\toastify\\toast.js":"12","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\app\\pre-screens.js":"13","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\progress\\index.js":"14","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\hoc\\wrapper.js":"15","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\404\\404.js":"16","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\axios\\axios-dev.js":"17","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\dark\\index.js":"18","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\light\\index.js":"19","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\extra-pages\\index.js":"20","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\sss\\index.js":"21","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ekip-alimlari\\index.js":"22","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\index\\index.js":"23","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ara\\index.js":"24","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\kayit-tamamla\\index.js":"25","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\episode\\index.js":"26","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\manga-episode\\index.js":"27","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\calendar\\index.js":"28","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ceviriler\\anime\\index.js":"29","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ceviriler\\manga\\index.js":"30","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\images.js":"31","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\light\\extra.js":"32","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\dark\\extra.js":"33","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\user\\register.js":"34","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\user\\login.js":"35","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\sss_page_text.js":"36","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\header\\header.js":"37","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\front-routes.js":"38","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ceviriler\\components.js":"39","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\helmet\\index.js":"40","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\disqus\\disqus.js":"41","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\warningerrorbox\\warning.js":"42","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\manga-episode\\index.js":"43","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\calendar\\index.js":"44","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\motd\\index.js":"45","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\episode-title-parser.js":"46","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\date-fns\\format.js":"47","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\markdown\\markdown.js":"48","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ceviriler\\styles.js":"49","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\drawer_items.js":"50","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ceviriler\\anime\\download-links.js":"51","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\header\\styles.js":"52","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\footer\\footer.js":"53","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\episode-link-overrides.js":"54","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\warningerrorbox\\error.js":"55","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\recruitment_panels.js":"56","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\episode\\components.js":"57","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ara\\components.js":"58","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\footer\\language-selector.js":"59","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\footer_items.js":"60","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\index.js":"61","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestmangaepisode.js":"62","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestepisode.js":"63","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestanimanga.js":"64","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestbatchlinks.js":"65","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\featured\\FeaturedContainer.js":"66","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\featured\\featured.js":"67"},{"size":8319,"mtime":1606291003254,"results":"68","hashOfConfig":"69"},{"size":3206,"mtime":1603278476350,"results":"70","hashOfConfig":"69"},{"size":6368,"mtime":1606290874499,"results":"71","hashOfConfig":"69"},{"size":362,"mtime":1606573352434,"results":"72","hashOfConfig":"69"},{"size":174,"mtime":1597147751066,"results":"73","hashOfConfig":"69"},{"size":184,"mtime":1603277924881,"results":"74","hashOfConfig":"69"},{"size":2767,"mtime":1606574131597,"results":"75","hashOfConfig":"69"},{"size":1238,"mtime":1604421343439,"results":"76","hashOfConfig":"69"},{"size":1388,"mtime":1603277619655,"results":"77","hashOfConfig":"69"},{"size":3115,"mtime":1602576639552,"results":"78","hashOfConfig":"69"},{"size":148,"mtime":1560610608376,"results":"79","hashOfConfig":"69"},{"size":2768,"mtime":1597147751048,"results":"80","hashOfConfig":"69"},{"size":1717,"mtime":1597147750998,"results":"81","hashOfConfig":"69"},{"size":399,"mtime":1566497431022,"results":"82","hashOfConfig":"69"},{"size":2459,"mtime":1597147751021,"results":"83","hashOfConfig":"69"},{"size":1378,"mtime":1597147750998,"results":"84","hashOfConfig":"69"},{"size":141,"mtime":1599059277764,"results":"85","hashOfConfig":"69"},{"size":1386,"mtime":1599734138465,"results":"86","hashOfConfig":"69"},{"size":1085,"mtime":1597145001184,"results":"87","hashOfConfig":"69"},{"size":44,"mtime":1597145001228,"results":"88","hashOfConfig":"69"},{"size":1460,"mtime":1597147751116,"results":"89","hashOfConfig":"69"},{"size":2255,"mtime":1597147751102,"results":"90","hashOfConfig":"69"},{"size":8804,"mtime":1606573998648,"results":"91","hashOfConfig":"69"},{"size":13811,"mtime":1599557273291,"results":"92","hashOfConfig":"69"},{"size":3079,"mtime":1597238332286,"results":"93","hashOfConfig":"69"},{"size":16614,"mtime":1597147751102,"results":"94","hashOfConfig":"69"},{"size":14511,"mtime":1597147751117,"results":"95","hashOfConfig":"69"},{"size":2940,"mtime":1600089541919,"results":"96","hashOfConfig":"69"},{"size":3252,"mtime":1602678092626,"results":"97","hashOfConfig":"69"},{"size":2735,"mtime":1602678087167,"results":"98","hashOfConfig":"69"},{"size":1854,"mtime":1606573156292,"results":"99","hashOfConfig":"69"},{"size":505,"mtime":1593296232134,"results":"100","hashOfConfig":"69"},{"size":505,"mtime":1593296232133,"results":"101","hashOfConfig":"69"},{"size":6426,"mtime":1597147751050,"results":"102","hashOfConfig":"69"},{"size":4839,"mtime":1597147751049,"results":"103","hashOfConfig":"69"},{"size":427,"mtime":1597145001177,"results":"104","hashOfConfig":"69"},{"size":13282,"mtime":1603277555282,"results":"105","hashOfConfig":"69"},{"size":997,"mtime":1600093120689,"results":"106","hashOfConfig":"69"},{"size":48797,"mtime":1606573177780,"results":"107","hashOfConfig":"69"},{"size":1998,"mtime":1602687190107,"results":"108","hashOfConfig":"69"},{"size":1522,"mtime":1599646908028,"results":"109","hashOfConfig":"69"},{"size":904,"mtime":1597145001148,"results":"110","hashOfConfig":"69"},{"size":1947,"mtime":1597147751041,"results":"111","hashOfConfig":"69"},{"size":7716,"mtime":1603818129582,"results":"112","hashOfConfig":"69"},{"size":3110,"mtime":1597147751048,"results":"113","hashOfConfig":"69"},{"size":1029,"mtime":1599817628321,"results":"114","hashOfConfig":"69"},{"size":218,"mtime":1597147751007,"results":"115","hashOfConfig":"69"},{"size":1108,"mtime":1597145001123,"results":"116","hashOfConfig":"69"},{"size":7395,"mtime":1606574080947,"results":"117","hashOfConfig":"69"},{"size":1101,"mtime":1597145001142,"results":"118","hashOfConfig":"69"},{"size":4749,"mtime":1597753755167,"results":"119","hashOfConfig":"69"},{"size":4069,"mtime":1599737406214,"results":"120","hashOfConfig":"69"},{"size":2627,"mtime":1597147751010,"results":"121","hashOfConfig":"69"},{"size":1536,"mtime":1597145001149,"results":"122","hashOfConfig":"69"},{"size":940,"mtime":1597145001132,"results":"123","hashOfConfig":"69"},{"size":617,"mtime":1597145001163,"results":"124","hashOfConfig":"69"},{"size":3187,"mtime":1597147751008,"results":"125","hashOfConfig":"69"},{"size":8528,"mtime":1599557409934,"results":"126","hashOfConfig":"69"},{"size":3984,"mtime":1597147751011,"results":"127","hashOfConfig":"69"},{"size":227,"mtime":1597145001164,"results":"128","hashOfConfig":"69"},{"size":2617,"mtime":1603816799604,"results":"129","hashOfConfig":"69"},{"size":3532,"mtime":1602576764504,"results":"130","hashOfConfig":"69"},{"size":3616,"mtime":1602576734650,"results":"131","hashOfConfig":"69"},{"size":7126,"mtime":1603817461312,"results":"132","hashOfConfig":"69"},{"size":3344,"mtime":1600088900526,"results":"133","hashOfConfig":"69"},{"size":6137,"mtime":1606573990606,"results":"134","hashOfConfig":"69"},{"size":6392,"mtime":1600088935875,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"1oj0vlv",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"157","usedDeprecatedRules":"138"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"138"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"138"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"138"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"138"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"138"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"138"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"138"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"138"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"138"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"138"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"138"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"138"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"138"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"287","usedDeprecatedRules":"138"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"138"},"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\index.js",[],["291","292"],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\App.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\reportWebVitals.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\polyfills.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\initNewLanguage.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\api-routes.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\i18n.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\localStorage.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\index.js",["293"],"import { unstable_createMuiStrictModeTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport { enUS, trTR } from '@material-ui/core/locale';\r\nimport i18next from '../i18n'\r\nimport merge from 'lodash-es/merge'\r\n\r\nimport darkTheme from './dark/index'\r\nimport lightTheme from './light/index'\r\n\r\nconst generalBorderRadius = 2\r\n\r\nconst languageMap = {\r\n    \"en\": enUS,\r\n    \"tr\": trTR\r\n}\r\n\r\nconst general = {\r\n    breakpoints: {\r\n        values: {\r\n            xs: 0,\r\n            sm: 600,\r\n            md: 960,\r\n            lg: 1280,\r\n            xl: 1600,\r\n        }\r\n    },\r\n    props: {\r\n        MuiTypography: {\r\n            variantMapping: {\r\n                body2: 'span',\r\n            },\r\n        },\r\n    },\r\n    typography: {\r\n        fontFamily: `'Poppins', sans-serif`,\r\n        h1: {\r\n\r\n            fontWeight: \"bold\",\r\n            fontSize: \"4.75rem\",\r\n            lineHeight: 1.2\r\n        },\r\n        h2: {\r\n            fontWeight: \"bold\",\r\n            fontSize: \"3rem\",\r\n            lineHeight: 1.2\r\n        },\r\n        h3: {\r\n            fontWeight: \"bold\",\r\n            fontSize: \"2.5rem\",\r\n            lineHeight: 1.2\r\n        },\r\n        h4: {\r\n            fontWeight: \"bold\",\r\n            fontSize: \"1.75rem\"\r\n        },\r\n        h5: {\r\n            fontWeight: \"bold\",\r\n            fontSize: \"1rem\"\r\n        },\r\n        h6: {\r\n            fontWeight: \"bold\",\r\n            fontSize: \".75rem\"\r\n        },\r\n        body1: {\r\n            fontSize: \"1rem\",\r\n            fontFamily: \"'Source Sans Pro', sans-serif\"\r\n        },\r\n        body2: {\r\n            fontFamily: \"'Source Sans Pro', sans-serif\",\r\n            fontSize: \".75rem\",\r\n            fontWeight: \"bold\",\r\n            letterSpacing: \"0.0075em\",\r\n            lineHeight: 1.6\r\n        },\r\n        subtitle1: {\r\n            fontFamily: \"'Source Sans Pro', sans-serif\",\r\n            fontSize: \"1rem\",\r\n            lineHeight: 1.25,\r\n            borderRadius: generalBorderRadius,\r\n        },\r\n        subtitle2: {\r\n            fontFamily: \"'Source Sans Pro', sans-serif\",\r\n            fontSize: \"0.75rem\",\r\n            borderRadius: generalBorderRadius,\r\n        }\r\n    },\r\n    overrides: {\r\n        defaultMargin: \"96px 56px 24px\",\r\n        defaultMarginMobile: \"80px 12px 24px\",\r\n        defaultMarginOverride: \"-32px -56px -24px\",\r\n        defaultMarginMobileOverride: \"-24px -12px -24px\",\r\n        defaultBorderRadius: 4,\r\n        MuiToolbar: {\r\n            gutters: {\r\n                ['@media (min-width:600px)']: {\r\n                    paddingLeft: 29\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    transitions: {\r\n        duration: {\r\n            short: 400,\r\n            shorter: 300\r\n        },\r\n        easing: {\r\n            ease: \"ease\"\r\n        }\r\n    }\r\n}\r\n\r\nexport default function getTheme(type) {\r\n    switch (type) {\r\n        case type: {\r\n            const theme = merge(general, type === \"dark\" ? darkTheme : lightTheme)\r\n            return responsiveFontSizes(unstable_createMuiStrictModeTheme(theme, languageMap[i18next.language]))\r\n        }\r\n        default:\r\n            return false\r\n    }\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\axios\\axios.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\toastify\\toast.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\app\\pre-screens.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\progress\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\hoc\\wrapper.js",["294"],"import React from 'react'\r\n\r\nimport Header from '../header/header'\r\n\r\nimport Login from '../user/login'\r\nimport Register from '../user/register'\r\n\r\nimport { ToastContainer, Slide } from 'react-toastify';\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    OutsideContainer: {\r\n        display: \"flex\",\r\n        width: \"100%\",\r\n        height: \"100%\"\r\n    },\r\n    PaddingDiv: {\r\n        boxSizing: \"border-box\",\r\n        padding: theme.overrides.defaultMargin,\r\n        width: \"100%\",\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            padding: theme.overrides.defaultMarginMobile\r\n        }\r\n    },\r\n    ScrollNode: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        overflowY: \"auto\",\r\n        \"-webkit-transform\": \"translateZ(0)\",\r\n        transform: \"translateZ(0)\",\r\n        '&::-webkit-scrollbar-track': {\r\n            marginTop: 64,\r\n            [theme.breakpoints.down('xs')]: {\r\n                marginTop: 56\r\n            }\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            overflowY: \"scroll\",\r\n            scrollbarWidth: \"none\", /* Firefox */\r\n            \"-ms-overflow-style\": \"none\"  /* Internet Explorer 10+ */\r\n        }\r\n    },\r\n    MainContainer: {\r\n        isolation: \"isolate\"\r\n    },\r\n    '@global': {\r\n        '*::-webkit-scrollbar': {\r\n            width: 8,\r\n            [theme.breakpoints.down('sm')]: {\r\n                width: 0,\r\n                height: 0\r\n            }\r\n        },\r\n        '*::-webkit-scrollbar-track': {\r\n            '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\r\n            backgroundColor: theme.palette.background.paper\r\n        },\r\n        '*::-webkit-scrollbar-thumb': {\r\n            backgroundColor: theme.palette.primary.main\r\n        }\r\n    }\r\n}))\r\n\r\n\r\nexport default function (props) {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.OutsideContainer}>\r\n                <Header />\r\n                <Login />\r\n                <Register />\r\n                <div className={classes.ScrollNode} id=\"scroll-node\">\r\n                    <div className={classes.PaddingDiv}>\r\n                        <section className={classes.MainContainer}>\r\n                            {props.children}\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n                <ToastContainer transition={Slide} />\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\404\\404.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\axios\\axios-dev.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\dark\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\light\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\extra-pages\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\sss\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ekip-alimlari\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\index\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ara\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\kayit-tamamla\\index.js",["295"],"import React, { useEffect, useState } from 'react'\r\nimport axios from '../../config/axios/axios'\r\nimport { getRegisterDone, getRegisterRefresh } from '../../config/api-routes'\r\nimport { Typography, Button } from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nexport default function KayitTamamla(props) {\r\n    const { t } = useTranslation('pages')\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [getNewHash, setGetNewHash] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const hash = props.match.params.hash\r\n\r\n        const fetchData = async () => {\r\n            const body = {\r\n                hash: hash\r\n            }\r\n\r\n            const res = await axios.post(getRegisterDone, body).catch(res => res)\r\n\r\n            if (res.status === 200) {\r\n                switch (res.data.success) {\r\n                    case \"success\": {\r\n                        setLoading(false)\r\n                        break\r\n                    }\r\n                    case \"refresh\": {\r\n                        setRefresh(true)\r\n                        setLoading(false)\r\n                        break\r\n                    }\r\n                    default: {\r\n                        setError(true)\r\n                        setLoading(false)\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                setError(true)\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n    }, [])\r\n\r\n    async function handleHashRefresh() {\r\n        const body = {\r\n            old_hash: props.match.params.hash\r\n        }\r\n\r\n        const res = await axios.post(getRegisterRefresh, body).catch(res => res)\r\n\r\n        if (res.status === 200) {\r\n            setGetNewHash(true)\r\n        }\r\n\r\n        else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h3\">\r\n                {!loading && !refresh && !error ?\r\n                    t('complete_registration.warnings.successful') :\r\n                    !loading && refresh && !error ?\r\n                        getNewHash ?\r\n                            <>\r\n                                {t('complete_registration.warnings.resend_confirmation_email_successful')}\r\n                            </>\r\n                            :\r\n                            <>\r\n                                {t('complete_registration.warnings.link_expired')}\r\n                                <Button variant=\"outlined\" onClick={handleHashRefresh}>\r\n                                    {t('complete_registration.warnings.resend_confirmation_email')}\r\n                                </Button>\r\n                            </> :\r\n                        !loading && error ?\r\n                            t('complete_registration.warnings.error') :\r\n                            t('complete_registration.warnings.loading')\r\n                }\r\n            </Typography>\r\n        </>\r\n    )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\episode\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\manga-episode\\index.js",["296"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useGlobal, useDispatch } from 'reactn'\r\nimport Metatags from '../../components/helmet/index'\r\nimport ReactGA from 'react-ga'\r\nimport axios from '../../config/axios/axios'\r\nimport Find from 'lodash-es/find'\r\n\r\nimport { useStyles, defaultBoxProps } from '../../components/manga-episode/index'\r\nimport { getMangaEpisodePageInfo, mangaPageImage } from '../../config/api-routes'\r\nimport { Grid, Typography, Box, Button, InputLabel, FormControl, Select, MenuItem } from '@material-ui/core'\r\nimport { NavigateNext, NavigateBefore, Image, BurstMode } from '@material-ui/icons'\r\nimport ContentWarning from '../../components/warningerrorbox/warning'\r\nimport DisqusBox from '../../components/disqus/disqus'\r\nimport MotdContainer from '../../components/motd'\r\n\r\nimport { mangaEpisodePage, mangaPage } from '../../config/front-routes'\r\nimport Loading from '../../components/progress'\r\nimport { Link } from 'react-router-dom'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { cursorNext, cursorPrevious } from '../../config/theming/images'\r\n\r\nexport default function MangaEpisodePage(props) {\r\n    const { t } = useTranslation(['pages', 'common'])\r\n    const classes = useStyles()\r\n    const [loading, setLoading] = useState(true)\r\n    const [mangaData, setMangaData] = useState({\r\n        manga_name: \"\",\r\n        manga_slug: \"\",\r\n        manga_cover: \"\"\r\n    })\r\n    const [episodeData, setEpisodeData] = useState([])\r\n    const [activeEpisodeData, setActiveEpisodeData] = useState({\r\n        id: null,\r\n        manga_name: \"\",\r\n        manga_cover: \"\",\r\n        credits: \"\",\r\n        created_by: \"\",\r\n        episode_name: \"\",\r\n        episode_number: \"\",\r\n        pages: []\r\n    })\r\n    const [activePageNumber, setActivePageNumber] = useState(1)\r\n    const [settings] = useGlobal('settings')\r\n    const setSettings = useDispatch('setSettings')\r\n\r\n    const NavigatorRef = useRef()\r\n\r\n    useEffect(() => {\r\n        const { slug, episode_number, page_number } = props.match.params\r\n\r\n        const fetchData = async () => {\r\n            let pageInfo\r\n\r\n            setMangaData({\r\n                manga_slug: slug,\r\n            })\r\n\r\n            try {\r\n                pageInfo = await axios.get(getMangaEpisodePageInfo(slug))\r\n            } catch (err) {\r\n                return setLoading(false)\r\n            }\r\n\r\n            if (pageInfo.data.length === 0 || pageInfo.status !== 200) {\r\n                return setLoading(false)\r\n            }\r\n\r\n            setMangaData(state => ({\r\n                ...state,\r\n                manga_name: pageInfo.data[0].manga_name,\r\n                manga_cover: pageInfo.data[0].manga_cover\r\n            }))\r\n\r\n            if (episode_number) {\r\n                const newData = Find(pageInfo.data, { episode_number: episode_number })\r\n                if (newData) {\r\n                    const pages = newData.pages\r\n                    setActiveEpisodeData(state => ({ ...state, ...newData, pages: pages }))\r\n                    // Gelen sayfa numarası, var olan sayfalara uyuşuyor mu bak. Çok büyük\r\n                    // ya da çok küçükse varolan değeri ata.\r\n                    setActivePageNumber(state => (\r\n                        page_number <= pages.length && page_number >= 1 ? Number(page_number) : state\r\n                    ))\r\n                }\r\n            }\r\n\r\n            setEpisodeData(pageInfo.data)\r\n            setLoading(false)\r\n        }\r\n\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const { slug } = props.match.params\r\n\r\n        window.history.replaceState(\"\", \"\", mangaEpisodePage(slug, activeEpisodeData.episode_number, activePageNumber))\r\n        ReactGA.pageview(window.location.pathname)\r\n        // eslint-disable-next-line\r\n    }, [activeEpisodeData, activePageNumber])\r\n\r\n    function handleChange(event) {\r\n        setActivePageNumber(1)\r\n        const newData = Find(episodeData, { episode_number: event.target.value })\r\n        setActiveEpisodeData(state => ({ ...state, ...newData, pages: newData.pages }));\r\n    }\r\n\r\n    function handleNavigateBeforeButton() {\r\n        setActivePageNumber(state => (\r\n            state === 1 ? 1 : state - 1\r\n        ))\r\n    }\r\n\r\n    function handleNavigateNextButton() {\r\n        setActivePageNumber(state => (\r\n            state === activeEpisodeData.pages.length ? state : state + 1\r\n        ))\r\n    }\r\n\r\n    function handleReadingStyleChangeButton() {\r\n        // İki tür var. \"pagebypage\" ve \"webtoon\"\r\n        if (settings.readingStyle === \"pagebypage\") setSettings(\"readingStyle\", \"webtoon\")\r\n        else setSettings(\"readingStyle\", \"pagebypage\")\r\n    }\r\n\r\n    function handleCenteringPage() {\r\n        // Header için 64 height ekle\r\n        const offset = NavigatorRef.current.clientHeight + 48\r\n        document.getElementById('scroll-node').scrollTo({\r\n            top: offset\r\n        })\r\n    }\r\n\r\n    if (!loading && episodeData.length !== 0) {\r\n        return (\r\n            <>\r\n                <Metatags title={\r\n                    t('manga_episode.metadata.title',\r\n                        {\r\n                            manga_name: mangaData.manga_name,\r\n                            episode_number: activeEpisodeData.episode_number,\r\n                            site_name: process.env.REACT_APP_SITENAME,\r\n                            count: Boolean(activeEpisodeData.episode_number) ? 1 : 2\r\n                        })}\r\n                    desc={\r\n                        t('manga_episode.metadata.description',\r\n                            {\r\n                                manga_name: mangaData.manga_name,\r\n                                episode_number: activeEpisodeData.episode_number,\r\n                                site_name: process.env.REACT_APP_SITENAME,\r\n                                count: Boolean(activeEpisodeData.episode_number) ? 1 : 2\r\n                            })}\r\n                    url={process.env.REACT_APP_SITEURL + mangaEpisodePage(props.match.params.slug, mangaData.slug)}\r\n                    content=\"books.book\"\r\n                    image={mangaData.manga_cover} />\r\n                <Grid container spacing={2} justify=\"center\" className={classes.Container}>\r\n                    <Grid item xs={12}>\r\n                        <MotdContainer {...props} content_type=\"manga-episode\" content_id={activeEpisodeData.id} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Box className={classes.Navigator} ref={NavigatorRef}>\r\n                            <FormControl fullWidth>\r\n                                <InputLabel htmlFor=\"episode-selector\">{t('manga_episode.warnings.select_the_episode_you_wish_to_read')}</InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    value={`${activeEpisodeData.episode_number}`}\r\n                                    onChange={handleChange}\r\n                                    inputProps={{\r\n                                        name: \"episode\",\r\n                                        id: \"episode-selector\"\r\n                                    }}\r\n                                >\r\n                                    {episodeData.map(d => <MenuItem key={d.episode_number} value={`${d.episode_number}`}>{t('common:episode.episode_title', { episode_number: d.episode_number })}{d.episode_name ? `: ${d.episode_name}` : \"\"}</MenuItem>)}\r\n                                </Select>\r\n                            </FormControl>\r\n                            {settings.readingStyle === \"pagebypage\" ?\r\n                                <>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        className={classes.NavigateBefore}\r\n                                        variant=\"outlined\"\r\n                                        onClick={handleNavigateBeforeButton}\r\n                                        disabled={activePageNumber !== 1 && activeEpisodeData.episode_number ? false : true}>\r\n                                        <NavigateBefore />\r\n                                    </Button>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        className={classes.NavigateNext}\r\n                                        variant=\"outlined\"\r\n                                        onClick={handleNavigateNextButton}\r\n                                        disabled={activePageNumber !== activeEpisodeData.pages.length && activeEpisodeData.episode_number ? false : true}>\r\n                                        <NavigateNext />\r\n                                    </Button>\r\n                                </>\r\n                                : \"\"}\r\n                            <div className={classes.ReadingStyleButtonContainer}>\r\n                                <Button\r\n                                    className={classes.PagebyPage}\r\n                                    variant=\"outlined\"\r\n                                    onClick={handleReadingStyleChangeButton}>\r\n                                    {settings.readingStyle === \"pagebypage\" ?\r\n                                        <><BurstMode />{t('common:buttons.webtoon')}</>\r\n                                        :\r\n                                        <><Image />{t('common:buttons.pagebypage')}</>\r\n                                    }\r\n                                </Button>\r\n                                <Link to={mangaPage(mangaData.manga_slug)}>\r\n                                    <Button\r\n                                        className={classes.ToManga}\r\n                                        variant=\"outlined\"\r\n                                    >\r\n                                        {t('common:buttons.goto_manga')}\r\n                                    </Button>\r\n                                </Link>\r\n                            </div>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={9}>\r\n                        <div className={classes.ImageContainer}>\r\n                            {activeEpisodeData.episode_number\r\n                                ?\r\n                                settings.readingStyle === \"pagebypage\" ?\r\n                                    <>\r\n                                        <img\r\n                                            className={classes.MainPageImage}\r\n                                            src={mangaPageImage(mangaData.manga_slug, activeEpisodeData.episode_number, activeEpisodeData.pages[(activePageNumber - 1)].filename)}\r\n                                            alt={t('manga_episode.img_alt', { manga_name: mangaData.manga_name, episode_number: activeEpisodeData.episode_number, page_number: activePageNumber })}\r\n                                            onLoad={_ => {\r\n                                                handleCenteringPage()\r\n                                            }} />\r\n                                        <div className={classes.ImageOverlayContainer}>\r\n                                            <div\r\n                                                className={classes.ImageOverlay}\r\n                                                style={{ cursor: `url(${cursorPrevious}), crosshair` }}\r\n                                                onClick={handleNavigateBeforeButton}\r\n                                                title={t('manga_episode.previous_page')}\r\n                                            />\r\n                                            <div\r\n                                                className={classes.ImageOverlay}\r\n                                                style={{ cursor: `url(${cursorNext}), crosshair` }}\r\n                                                onClick={handleNavigateNextButton}\r\n                                                title={t('manga_episode.next_page')} />\r\n                                        </div>\r\n                                    </>\r\n                                    :\r\n                                    <div className={classes.WebtoonContainer}>\r\n                                        {activeEpisodeData.pages.map((page, index) => (\r\n                                            <img\r\n                                                key={page.filename}\r\n                                                loading=\"lazy\"\r\n                                                className={classes.MainPageImage}\r\n                                                width=\"900px\"\r\n                                                height=\"1270px\"\r\n                                                src={mangaPageImage(mangaData.manga_slug, activeEpisodeData.episode_number, page.filename)}\r\n                                                alt={t('manga_episode.img_alt', { manga_name: mangaData.manga_name, episode_number: activeEpisodeData.episode_number, page_number: index + 1 })} />\r\n                                        ))}\r\n                                    </div>\r\n                                :\r\n                                <ContentWarning\r\n                                    {...defaultBoxProps}\r\n                                    p={1}>\r\n                                    {t('manga_episode.warnings.please_select_episode')}\r\n                                </ContentWarning>\r\n                            }\r\n                        </div>\r\n                    </Grid>\r\n                    {activeEpisodeData.episode_number ?\r\n                        <Grid item xs={12}>\r\n                            <Box {...defaultBoxProps} p={2}>\r\n                                <DisqusBox\r\n                                    withButton\r\n                                    config={{ identifier: `manga/${mangaData.manga_slug}/${activeEpisodeData.episode_number}` }} />\r\n                            </Box>\r\n                        </Grid>\r\n                        : \"\"}\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n\r\n    else if (!loading) {\r\n        return (\r\n            <>\r\n                <Grid container>\r\n                    <Typography variant=\"h1\">{t('manga_episode.warnings.no_episode_data')}</Typography>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <Loading />\r\n        )\r\n    }\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\calendar\\index.js",["297"],"import React, { useState, useEffect } from 'react'\r\nimport ReactGA from 'react-ga';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Metatags from '../../components/helmet/index'\r\nimport { CalendarDayPanel, CalendarDays } from '../../components/calendar'\r\nimport axios from '../../config/axios/axios';\r\nimport { getCalendarData } from '../../config/api-routes';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport startOfWeek from 'date-fns/startOfWeek'\r\nimport getDay from 'date-fns/getDay'\r\nimport { calendarPage } from '../../config/front-routes';\r\n\r\nconst dayList = [1, 2, 3, 4, 5, 6, 0]\r\n\r\nexport default function CalendarPage() {\r\n    const { t } = useTranslation(\"pages\")\r\n    const [calendarRawData, setCalendarRawData] = useState([])\r\n    const [calendarTodayData, setCalendarTodayData] = useState([])\r\n    const [selectedDay, setSelectedDay] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const todayDate = new Date()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const res = await axios.get(\r\n                    getCalendarData\r\n                ).catch(res => res)\r\n\r\n                if (res.status === 200) {\r\n                    setCalendarRawData(res.data)\r\n\r\n                    return setLoading(false)\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n                return setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n        ReactGA.pageview(window.location.pathname)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (selectedDay === null) return\r\n\r\n\r\n        const tempCalendarData = []\r\n\r\n        for (const c of calendarRawData) {\r\n            const day = getDay(new Date(c.release_date))\r\n\r\n            if (day === selectedDay) {\r\n                tempCalendarData.push(c)\r\n            }\r\n        }\r\n\r\n        setCalendarTodayData(tempCalendarData)\r\n    }, [selectedDay])\r\n\r\n    if (loading) {\r\n        return (\r\n            <CircularProgress />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Metatags title={\r\n                t('calendar.metadata.title',\r\n                    {\r\n                        site_name: process.env.REACT_APP_SITENAME,\r\n                    })}\r\n                desc={\r\n                    t('calendar.metadata.description',\r\n                        {\r\n                            site_name: process.env.REACT_APP_SITENAME,\r\n                        })}\r\n                url={process.env.REACT_APP_SITEURL + calendarPage} />\r\n            <CalendarDays\r\n                firstDayOfWeek={startOfWeek(todayDate, { weekStartsOn: 1 })}\r\n                todayDate={todayDate}\r\n                selectedDay={selectedDay}\r\n                setSelectedDay={setSelectedDay}\r\n                dayList={dayList} />\r\n            {calendarTodayData.length ? <CalendarDayPanel items={calendarTodayData} /> : \"\"}\r\n        </>\r\n    )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ceviriler\\anime\\index.js",["298"],"import React, { useState, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Metatags from '../../../components/helmet/index'\r\nimport ReactGA from 'react-ga';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport axios from '../../../config/axios/axios'\r\n\r\nimport { AnimePage } from '../../../components/ceviriler/components'\r\nimport { animePage } from '../../../config/front-routes'\r\nimport { contentMetadata, getAnimeIndex } from '../../../config/api-routes'\r\n\r\nimport Loading from '../../../components/progress/index'\r\n\r\nexport default function (props) {\r\n    const { t } = useTranslation('pages')\r\n    const [anime, setAnime] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const res = await axios.get(\r\n                getAnimeIndex(props.match.params.slug)\r\n            ).catch(res => res)\r\n\r\n            if (res.status === 200) {\r\n                if (res.data.translators)\r\n                    res.data.translators = res.data.translators.split(',')\r\n                else\r\n                    res.data.translators = []\r\n\r\n                if (res.data.encoders)\r\n                    res.data.encoders = res.data.encoders.split(',')\r\n                else\r\n                    res.data.encoders = []\r\n\r\n                if (res.data.genres) {\r\n                    res.data.adult_modal = res.data.genres.search(/\\+18/) !== -1 ? true : false\r\n                    res.data.genres = res.data.genres.split(',')\r\n                }\r\n                else\r\n                    res.data.genres = []\r\n\r\n                if (res.data.studios)\r\n                    res.data.studios = res.data.studios.split(',')\r\n                else\r\n                    res.data.studios = []\r\n\r\n                setAnime(res.data)\r\n                setLoading(false)\r\n            }\r\n            else {\r\n                setError(true)\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n        ReactGA.pageview(window.location.pathname)\r\n    }, [props.match.params.slug])\r\n\r\n    if (loading && error) {\r\n        return (\r\n            <Redirect to=\"/404\" />\r\n        )\r\n    }\r\n\r\n    if (!loading) {\r\n        return (\r\n            <>\r\n                <Metatags\r\n                    title={t('anime.metadata.title',\r\n                        {\r\n                            site_name: process.env.REACT_APP_SITENAME,\r\n                            anime_name: anime.name\r\n                        })}\r\n                    desc={t('anime.metadata.description',\r\n                        {\r\n                            site_name: process.env.REACT_APP_SITENAME,\r\n                            anime_name: anime.name,\r\n                            anime_synopsis: anime.synopsis\r\n                        })}\r\n                    url={animePage(anime.slug)}\r\n                    content=\"video.tv_show\"\r\n                    image={process.env.REACT_APP_SITEURL + contentMetadata(\"anime\", anime.slug)}\r\n                    twitter_card={\"summary_large_image\"} />\r\n                <AnimePage {...anime} />\r\n            </>\r\n        )\r\n    }\r\n    else return (\r\n        <Loading />\r\n    )\r\n} ","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\pages\\ceviriler\\manga\\index.js",["299"],"import React, { useState, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport ReactGA from 'react-ga';\r\nimport Metatags from '../../../components/helmet/index'\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport axios from '../../../config/axios/axios'\r\n\r\nimport { MangaPage } from '../../../components/ceviriler/components'\r\nimport { mangaPage } from '../../../config/front-routes'\r\nimport { contentMetadata, getMangaIndex } from '../../../config/api-routes'\r\n\r\nimport Loading from '../../../components/progress/index'\r\n\r\nexport default function (props) {\r\n    const { t } = useTranslation('pages')\r\n    const [manga, setManga] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const res = await axios(\r\n                getMangaIndex(props.match.params.slug),\r\n            ).catch(res => res)\r\n\r\n            if (res.status === 200) {\r\n                if (res.data.translators)\r\n                    res.data.translators = res.data.translators.split(',')\r\n                if (res.data.editors)\r\n                    res.data.editors = res.data.editors.split(',')\r\n                if (res.data.genres) {\r\n                    res.data.adult_modal = res.data.genres.search(/\\+18/) !== -1 ? true : false\r\n                    res.data.genres = res.data.genres.split(',')\r\n                }\r\n                if (res.data.authors)\r\n                    res.data.authors = res.data.authors.split(',')\r\n\r\n                setManga(res.data)\r\n                setLoading(false)\r\n            }\r\n            else {\r\n                setError(true)\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n        ReactGA.pageview(window.location.pathname)\r\n    }, [props.match.params.slug]);\r\n\r\n    if (loading && error) {\r\n        return (\r\n            <Redirect to=\"/404\" />\r\n        )\r\n    }\r\n\r\n    if (!loading) {\r\n        return (\r\n            <>\r\n                <Metatags\r\n                    title={t('manga.metadata.title', { site_name: process.env.REACT_APP_SITENAME, manga_name: manga.name })}\r\n                    desc={t('manga.metadata.description', { site_name: process.env.REACT_APP_SITENAME, manga_name: manga.name, manga_synopsis: manga.synopsis })}\r\n                    url={mangaPage(manga.slug)}\r\n                    content=\"video.tv_show\"\r\n                    image={process.env.REACT_APP_SITEURL + contentMetadata(\"manga\", manga.slug)}\r\n                    twitter_card={\"summary_large_image\"} />\r\n                <MangaPage {...manga} />\r\n            </>\r\n        )\r\n\r\n\r\n    }\r\n    else return (\r\n        <Loading />\r\n    )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\images.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\light\\extra.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\theming\\dark\\extra.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\user\\register.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\user\\login.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\sss_page_text.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\header\\header.js",["300","301","302"],"import React, { useState } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { useGlobal, useDispatch, useEffect } from 'reactn'\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Footer from '../footer/footer'\r\n\r\nimport { useStyles } from './styles'\r\nimport clsx from 'clsx'\r\nimport useTheme from '@material-ui/styles/useTheme'\r\nimport { Drawer, AppBar, Toolbar, List, Divider, ListItem, ListItemIcon, ListItemText, Typography, MenuItem, Menu, makeStyles, Box } from '@material-ui/core'\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CalendarIcon from '@material-ui/icons/CalendarToday';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MoonIcon from '@material-ui/icons/Brightness2'\r\nimport SunIcon from '@material-ui/icons/WbSunny'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport { indexPage, searchPage, faqPage, recPage, adminPage, calendarPage } from '../../config/front-routes'\r\nimport { fullLogo, fullLogoDark } from '../../config/theming/images'\r\nimport ExtraPagesList from '../../pages/extra-pages/index'\r\nimport SecondMenuItems from '../../config/drawer_items'\r\n\r\nexport default function MiniDrawer() {\r\n    const { t } = useTranslation('components');\r\n    const [settings] = useGlobal('settings')\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    // eslint-disable-next-line\r\n    const [, setShowModal] = useGlobal('showModal')\r\n    const [userInfo] = useGlobal('user')\r\n    const [usertheme] = useGlobal('theme')\r\n    const [isAdmin] = useGlobal('isAdmin')\r\n    const logoutHandler = useDispatch(\"logoutHandler\")\r\n    const setUserTheme = useDispatch('setTheme')\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const profileMenu = Boolean(anchorEl);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [menuItems, setMenuItems] = React.useState([])\r\n\r\n    useEffect(() => {\r\n        setMenuItems([\r\n            {\r\n                text: t('header.index.default'),\r\n                shortText: t('header.index.short'),\r\n                link: indexPage,\r\n                show: true,\r\n                icon: <HomeIcon />\r\n            },\r\n            {\r\n                text: t('header.search.default'),\r\n                shortText: t('header.search.short'),\r\n                link: searchPage,\r\n                show: true,\r\n                icon: <SearchIcon />\r\n            },\r\n            {\r\n                text: t('header.calendar.default'),\r\n                shortText: t('header.calendar.short'),\r\n                link: calendarPage,\r\n                show: true,\r\n                icon: <CalendarIcon />\r\n            },\r\n            {\r\n                text: t('header.faq.default'),\r\n                shortText: t('header.faq.short'),\r\n                link: faqPage,\r\n                show: process.env.REACT_APP_SSS_PAGE === \"true\" ? true : false,\r\n                icon: <InfoIcon />\r\n            },\r\n            {\r\n                text: t('header.recruitment.default'),\r\n                shortText: t('header.recruitment.short'),\r\n                link: recPage,\r\n                show: true,\r\n                icon: <h2>{t('header.recruitment.logo')}</h2>\r\n            }\r\n        ])\r\n    }, [settings.language])\r\n\r\n    useEffect(() => {\r\n        if (ExtraPagesList.length) {\r\n            const newMenus = []\r\n\r\n            ExtraPagesList.map(({ PageUrl, PageTitle, PageShortTitle, PageIcon }) => {\r\n                newMenus.push({\r\n                    text: PageTitle,\r\n                    shortText: PageShortTitle ? PageShortTitle : \"\",\r\n                    link: PageUrl,\r\n                    icon: PageIcon ? PageIcon : \"\",\r\n                    show: true\r\n                })\r\n            })\r\n\r\n            setMenuItems(state => [\r\n                ...state, ...newMenus\r\n            ])\r\n        }\r\n    }, [])\r\n\r\n    const [menuItems2] = React.useState(SecondMenuItems)\r\n\r\n    function handleMenu(event) {\r\n        setAnchorEl(event.currentTarget);\r\n    }\r\n\r\n    function handleClose() {\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    function handleLogoutButton() {\r\n        logoutHandler();\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    function handleLoginRegisterButtons(type) {\r\n        setAnchorEl(null)\r\n        setShowModal(type)\r\n    }\r\n\r\n    const handleDrawerState = () => {\r\n        setOpen(state => !state);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    function SidePanel() {\r\n        return (\r\n            <>\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    {menuItems.map(item => item.show ?\r\n                        (\r\n                            <NavLink exact to={item.link} onClick={handleDrawerClose} activeClassName={classes.Active} key={item.text}>\r\n                                <ListItem className={classes.ListItem} button>\r\n                                    <Box className={classes.iconContainer}>\r\n                                        <ListItemIcon className={classes.ListItemIcon}>{item.icon}</ListItemIcon>\r\n                                        <Typography variant=\"subtitle2\" className={classes.shortText}>{item.shortText || item.text}</Typography>\r\n                                    </Box>\r\n                                    <ListItemText className={classes.ListItemText}><Typography variant=\"body2\">{item.text}</Typography></ListItemText>\r\n                                </ListItem>\r\n                            </NavLink>\r\n                        )\r\n                        :\r\n                        \"\")}\r\n                </List>\r\n                <Divider />\r\n                {\r\n                    menuItems2.length ?\r\n                        <>\r\n                            <List>\r\n                                {menuItems2.map(item => (\r\n                                    <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\" className={classes.secondary} key={item.title}>\r\n                                        <ListItem className={classes.ListItem} button style={{ backgroundColor: \"inherit\" }}>\r\n                                            <Box className={classes.iconContainer}>\r\n                                                <ListItemIcon className={classes.ListItemIcon}>{item.icon}</ListItemIcon>\r\n                                                <Typography variant=\"subtitle2\" className={classes.shortText}>{item.short_title}</Typography>\r\n                                            </Box>\r\n                                            <ListItemText className={classes.ListItemText}><Typography variant=\"body2\">{item.title}</Typography></ListItemText>\r\n                                        </ListItem>\r\n                                    </a>\r\n                                ))}\r\n                            </List>\r\n                            <Divider />\r\n                        </>\r\n                        :\r\n                        \"\"\r\n                }\r\n\r\n                <div className={clsx(classes.hide, {\r\n                    [classes.footerDisplay]: open,\r\n                })}>\r\n                    <Footer />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar\r\n                color=\"default\"\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"Open/close drawer\"\r\n                        onClick={handleDrawerState}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <div className={classes.logoContainer}>\r\n                        <Link to={indexPage} style={{ display: \"flex\" }}>\r\n                            <img title=\"Site logo\" loading=\"lazy\" className={classes.logo} src={usertheme === \"dark\" ? fullLogo : fullLogoDark} alt=\"Site Logo\" />\r\n                        </Link>\r\n                    </div>\r\n                    <div className={classes.RightBox}>\r\n                        {\r\n                            usertheme === \"dark\"\r\n                                ?\r\n                                <IconButton onClick={() => setUserTheme(\"light\")}><SunIcon style={{ height: \"25px\" }} /></IconButton>\r\n                                :\r\n                                <IconButton onClick={() => setUserTheme(\"dark\")}><MoonIcon style={{ height: \"25px\" }} /></IconButton>\r\n                        }\r\n                        {userInfo.success ?\r\n                            <IconButton\r\n                                aria-label={userInfo.username}\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleMenu}\r\n                                color=\"default\"\r\n                            >\r\n                                {userInfo.avatar ?\r\n                                    <img title={`${userInfo.username} avatar`} loading=\"lazy\" src={userInfo.avatar} style={{ height: \"24px\" }} alt={`${userInfo.username} avatar`} aria-labelledby={`${userInfo.username} avatar`} />\r\n                                    :\r\n                                    <AccountCircle title={`${userInfo.username} avatar`} alt={`${userInfo.username} avatar`} aria-labelledby={`${userInfo.username} avatar`} />}\r\n                            </IconButton>\r\n                            :\r\n                            <IconButton\r\n                                aria-label=\"account menus\"\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleMenu}\r\n                                color=\"default\"\r\n                            >\r\n                                <AccountCircle />\r\n                            </IconButton>\r\n                        }\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorEl}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            open={profileMenu}\r\n                            onClose={handleClose}\r\n                        >\r\n                            <div>\r\n                                {userInfo.success\r\n                                    ?\r\n                                    isAdmin ?\r\n                                        <>\r\n                                            <a href={adminPage} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                <MenuItem>{t('common:ns.admin_panel')}</MenuItem>\r\n                                            </a>\r\n                                            <MenuItem onClick={handleLogoutButton}>{t('common:ns.logout')}</MenuItem>\r\n                                        </>\r\n                                        :\r\n                                        <MenuItem onClick={handleLogoutButton}>{t('common:ns.logout')}</MenuItem>\r\n                                    :\r\n                                    <>\r\n                                        <MenuItem onClick={() => handleLoginRegisterButtons(\"login\")}>{t('common:ns.login')}</MenuItem>\r\n                                        <MenuItem onClick={() => handleLoginRegisterButtons(\"register\")}>{t('common:ns.register')}</MenuItem>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                        </Menu>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx(classes.SidePanel, {\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <SidePanel />\r\n            </Drawer>\r\n        </div >\r\n    );\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\front-routes.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ceviriler\\components.js",["303","304","305","306","307","308"],"import React, { useState, useEffect } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Find from \"lodash-es/find\"\r\nimport Slice from \"lodash-es/slice\"\r\nimport clsx from \"clsx\"\r\nimport { Grid, Typography, Box, Button, Divider, Modal } from \"@material-ui/core\"\r\nimport { blue, grey, lime, purple, red } from \"@material-ui/core/colors\"\r\nimport { WarningSharp } from \"@material-ui/icons\"\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\n\r\nimport { bluray, CoverPlaceholder } from \"../../config/theming/images\"\r\nimport { getAnimeWatchIndex, mangaEpisodePage } from \"../../config/front-routes\"\r\nimport { contentHeader, contentLogo, contentCover, jikanAPI, youtubeEmbedLink } from \"../../config/api-routes\"\r\nimport useStyles from './styles'\r\n\r\nimport DisqusBox from \"../../components/disqus/disqus\"\r\nimport WarningBox from \"../warningerrorbox/warning\"\r\nimport DownloadLink from \"./anime/download-links\"\r\nimport MotdContainer from \"../motd\"\r\nimport EpisodeTitleParser from \"../../config/episode-title-parser\"\r\nimport Format from \"../date-fns/format\"\r\nimport axios from \"../../config/axios/axios\"\r\nimport Loading from \"../progress\"\r\nimport Dotdotdot from \"react-dotdotdot\"\r\n\r\nfunction AnimePage(props) {\r\n    const { t } = useTranslation(['components', 'common'])\r\n    const {\r\n        id,\r\n        name,\r\n        slug,\r\n        cover_art,\r\n        premiered,\r\n        version,\r\n        translators,\r\n        pv,\r\n        encoders,\r\n        studios,\r\n        release_date,\r\n        genres,\r\n        mal_link,\r\n        synopsis,\r\n        episodes,\r\n        series_status,\r\n        trans_status,\r\n        episode_count } = props\r\n    const classes = useStyles(props)\r\n    const [headerError, setHeaderError] = useState(false)\r\n    const [coverArtError, setCoverArtError] = useState(false)\r\n    const [logoError, setLogoError] = useState(false)\r\n    const [adultModal, setAdultModal] = useState(props.adult_modal)\r\n\r\n    // Jikan States\r\n    const [jikanScoreStatusDataLoading, setJikanScoreStatusDataLoading] = useState(true)\r\n    const [jikanCharacterStaffDataLoading, setJikanCharacterStaffDataLoading] = useState(true)\r\n    const [jikanScoreData, setJikanScoreData] = useState([])\r\n    const [jikanStatusData, setJikanStatusData] = useState({})\r\n    const [jikanCharactersData, setJikanCharactersData] = useState([])\r\n    const [jikanStaffData, setJikanStaffData] = useState([])\r\n\r\n    useEffect(() => {\r\n        async function getJikanStatusData() {\r\n            const tempData = []\r\n            try {\r\n                const res = await axios.get(jikanAPI({ contentType: \"anime\", contentId: mal_link.split(\"/\")[4], extraPath: \"stats\" }))\r\n\r\n                if (res.status === 200) {\r\n                    for (const score in res.data.scores) {\r\n                        tempData.push({\r\n                            score: score,\r\n                            \"votesColor\": getVoteColor(score),\r\n                            ...res.data.scores[score]\r\n                        })\r\n                    }\r\n\r\n                    setJikanScoreData(tempData)\r\n                    setJikanStatusData({\r\n                        completed: res.data.completed || 0,\r\n                        watching: res.data.watching || 0,\r\n                        dropped: res.data.dropped || 0,\r\n                        on_hold: res.data.on_hold || 0,\r\n                        plan_to_watch: res.data.plan_to_watch || 0,\r\n                    })\r\n                    setJikanScoreStatusDataLoading(false)\r\n                }\r\n                else {\r\n                    setJikanScoreStatusDataLoading(false)\r\n                }\r\n            } catch (err) {\r\n                setJikanScoreStatusDataLoading(false)\r\n            }\r\n        }\r\n\r\n        async function getJikanCharactersData() {\r\n            try {\r\n                const res = await axios.get(jikanAPI({ contentType: \"anime\", contentId: mal_link.split(\"/\")[4], extraPath: \"characters_staff\" }))\r\n\r\n                if (res.status === 200) {\r\n                    setJikanCharactersData(res.data.characters)\r\n                    setJikanStaffData(res.data.staff)\r\n                    setJikanCharacterStaffDataLoading(false)\r\n                }\r\n                else {\r\n                    setJikanCharacterStaffDataLoading(false)\r\n                }\r\n            } catch (err) {\r\n                setJikanCharacterStaffDataLoading(false)\r\n            }\r\n        }\r\n\r\n        getJikanStatusData()\r\n        getJikanCharactersData()\r\n    }, [])\r\n\r\n    let batchLinks = episodes.map((data) =>\r\n        data.can_user_download && data.special_type === \"toplu\" ? (\r\n            <DownloadLink\r\n                key={data.id}\r\n                title={EpisodeTitleParser(data.anime_name, data.episode_number, data.special_type).title}\r\n                animeslug={slug}\r\n                episodeid={data.id}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    let downloadLinks = episodes.map((data) =>\r\n        data.can_user_download && data.special_type !== \"toplu\" ? (\r\n            <DownloadLink\r\n                key={data.id}\r\n                title={EpisodeTitleParser(data.anime_name, data.episode_number, data.special_type).title}\r\n                animeslug={slug}\r\n                episodeid={data.id}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    function handleClose() {\r\n        return setAdultModal(state => (!state))\r\n    }\r\n\r\n    // Delete null objects from downloadLinks\r\n    batchLinks = batchLinks.filter((b) => b)\r\n    downloadLinks = downloadLinks.filter((d) => d)\r\n\r\n    return (\r\n        <>\r\n            <AdultModal open={adultModal} handleClose={handleClose} />\r\n            <div className={classes.Container}>\r\n                <div className={classes.BackgroundContainer}>\r\n                    <div className={classes.AnimeContainer}>\r\n                        <MotdContainer {...props} content_type=\"anime\" content_id={id} />\r\n                        <div className={classes.TextContainer}>\r\n                            <Box mb={2}>\r\n                                <Typography variant=\"h4\" component=\"h6\" className={classes.PremieredContainer}>\r\n                                    {premiered ? premiered : null}\r\n                                    {version === \"bd\" ? (\r\n                                        <img\r\n                                            loading=\"lazy\"\r\n                                            src={bluray}\r\n                                            alt=\"\"\r\n                                            style={{ height: \"1rem\" }}\r\n                                        />\r\n                                    ) : null}\r\n                                </Typography>\r\n                                {logoError ? (\r\n                                    <Typography variant=\"h3\" component=\"h1\">\r\n                                        {name}\r\n                                    </Typography>\r\n                                ) : (\r\n                                        <Box className={classes.LogoImage}>\r\n                                            <img\r\n                                                loading=\"lazy\"\r\n                                                alt=\"\"\r\n                                                src={contentLogo(\"anime\", slug)}\r\n                                                onError={(img) => {\r\n                                                    setLogoError(true)\r\n                                                    img.target.style.display =\r\n                                                        \"none\"\r\n                                                }}\r\n                                            ></img>\r\n                                        </Box>\r\n                                    )}\r\n                                <Typography\r\n                                    variant=\"body1\"\r\n                                    className={classes.SynopsisContainer}\r\n                                >\r\n                                    {synopsis ? synopsis : t('common:warnings.not_found_synopsis')}\r\n                                </Typography>\r\n                            </Box>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\">\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.translator', { count: translators.length })}\r\n                                    list={translators}\r\n                                />\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.encoder', { count: encoders.length })}\r\n                                    list={encoders}\r\n                                />\r\n                            </Box>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\">\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.studio', { count: studios.length })}\r\n                                    list={studios}\r\n                                />\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.release_date')}\r\n                                    list={[\r\n                                        Format(\r\n                                            new Date(release_date)\r\n                                        ),\r\n                                    ]}\r\n                                />\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                {episodes.length !== 0 ? (\r\n                                    <Link to={getAnimeWatchIndex(slug)}>\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            className={classes.ContentButton}\r\n                                        >\r\n                                            {t('common:ns.watch')}\r\n                                        </Button>\r\n                                    </Link>\r\n                                ) : null}\r\n                                {mal_link ? (\r\n                                    <a\r\n                                        href={mal_link}\r\n                                        target=\"_blank\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                    >\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            className={classes.ContentButton}\r\n                                        >\r\n                                            {t('common:ns.mal_page')}\r\n                                        </Button>\r\n                                    </a>\r\n                                ) : null}\r\n                            </Box>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.BackgroundImage}>\r\n                        {headerError ? (\r\n                            <img\r\n                                loading=\"lazy\"\r\n                                alt=\"\"\r\n                                src={contentCover(\"anime\", slug)}\r\n                                className={clsx(classes.CoverArtContainer, {\r\n                                    [classes.FallbackCoverArt]: headerError,\r\n                                })}\r\n                                onError={(img) => {\r\n                                    if (coverArtError) {\r\n                                        img.target.src = CoverPlaceholder\r\n                                        return null\r\n                                    }\r\n                                    img.target.src = cover_art\r\n                                    setCoverArtError(true)\r\n                                }}\r\n                            />\r\n                        ) : null}\r\n                        <img\r\n                            loading=\"lazy\"\r\n                            alt=\"\"\r\n                            src={contentHeader(\"anime\", slug)}\r\n                            className={clsx({\r\n                                [classes.FallbackBackgroundImage]: headerError,\r\n                            })}\r\n                            onError={(img) => {\r\n                                img.target.src = coverArtError ? cover_art : contentCover(\"anime\", slug)\r\n                                setHeaderError(true)\r\n                            }}\r\n                        ></img>\r\n                        <div className={classes.BackgroundImageOverlay} />\r\n                    </div>\r\n                </div>\r\n                <Box className={classes.MetadataContainer}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} md={4}>\r\n                            <MetadataContainer\r\n                                type=\"genres\"\r\n                                title={t('common:ns.genre', { count: genres.length })}\r\n                                list={genres}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4}>\r\n                            <MetadataContainer\r\n                                title={t('common:ns.series_status')}\r\n                                list={episode_count ? [t(`common:ns.${series_status}`), t('translations.anime.series_status', { episode_count: episode_count, count: episode_count })] : [t(`common:ns.${series_status}`)]}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4}>\r\n                            <MetadataContainer\r\n                                title={t('common:ns.trans_status')}\r\n                                list={[t(`common:ns.${trans_status}`)]}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                {/* Download Links */}\r\n                <Box className={classes.BottomStuff}>\r\n                    <Box mb={2}>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h4\" gutterBottom>\r\n                                    {t('translations.anime.download_links')}\r\n                                </Typography>\r\n                                <ul>\r\n                                    {batchLinks.length !== 0 ? (\r\n                                        <>\r\n                                            {batchLinks}\r\n                                            {downloadLinks.length ===\r\n                                                0 ? null : (\r\n                                                    <Divider\r\n                                                        className={\r\n                                                            classes.DownloadLinkDivider\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                        </>\r\n                                    ) : null}\r\n                                    {downloadLinks.length !== 0 ? (\r\n                                        downloadLinks\r\n                                    ) : batchLinks.length !== 0 ? null : (\r\n                                        <WarningBox>\r\n                                            {t('translations.warnings.anime.not_found_download_links')}\r\n                                        </WarningBox>\r\n                                    )}\r\n                                </ul>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n                {/* Jikan Stats */}\r\n                <Box className={classes.JikanStatsContainer}>\r\n                    <Typography variant=\"h4\">\r\n                        {t('translations.anime.stats')}\r\n                    </Typography>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                            <JikanStatsScoresChart data={jikanScoreData} loading={jikanScoreStatusDataLoading} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                            <JikanStatsStatusChart data={jikanStatusData} loading={jikanScoreStatusDataLoading} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                            <PVBox link={pv} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12} lg={6}>\r\n                            <CharactersStaffBox data={jikanCharactersData} type=\"characters\" loading={jikanCharacterStaffDataLoading} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12} lg={6}>\r\n                            <CharactersStaffBox data={jikanStaffData} type=\"staff\" loading={jikanCharacterStaffDataLoading} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Divider />\r\n                {/* Disqus Box */}\r\n                <Box className={classes.BottomStuff}>\r\n                    {process.env.REACT_APP_DISQUS_SHORTNAME ? (\r\n                        <>\r\n                            <Box>\r\n                                <DisqusBox\r\n                                    config={{\r\n                                        identifier: \"anime/\" + id,\r\n                                        title: `${name} - ${process.env.REACT_APP_SITENAME} Anime`,\r\n                                    }}\r\n                                />\r\n                            </Box>\r\n                        </>\r\n                    ) : (\r\n                            \"\"\r\n                        )}\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction MangaPage(props) {\r\n    const { t } = useTranslation(['components', 'common'])\r\n    const { id, name, slug, cover_art, translators, editors, authors, release_date, genres, mal_link, synopsis, reader_link, download_link, series_status, trans_status, episode_count } = props\r\n    const classes = useStyles(props)\r\n    const [headerError, setHeaderError] = useState(false)\r\n    const [coverArtError, setCoverArtError] = useState(false)\r\n    const [logoError, setLogoError] = useState(false)\r\n    const [adultModal, setAdultModal] = useState(props.adult_modal)\r\n\r\n    // Jikan States\r\n    const [jikanScoreStatusDataLoading, setJikanScoreStatusDataLoading] = useState(true)\r\n    const [jikanCharacterStaffDataLoading, setJikanCharacterStaffDataLoading] = useState(true)\r\n    const [jikanScoreData, setJikanScoreData] = useState([])\r\n    const [jikanStatusData, setJikanStatusData] = useState({})\r\n    const [jikanCharactersData, setJikanCharactersData] = useState([])\r\n    const [jikanStaffData, setJikanStaffData] = useState([])\r\n\r\n    useEffect(() => {\r\n        async function getJikanStatusData() {\r\n            const tempData = []\r\n            try {\r\n                const res = await axios.get(jikanAPI({ contentType: \"manga\", contentId: mal_link.split(\"/\")[4], extraPath: \"stats\" }))\r\n\r\n                if (res.status === 200) {\r\n                    for (const score in res.data.scores) {\r\n                        tempData.push({\r\n                            score: score,\r\n                            \"votesColor\": getVoteColor(score),\r\n                            ...res.data.scores[score]\r\n                        })\r\n                    }\r\n\r\n                    setJikanScoreData(tempData)\r\n                    setJikanStatusData({\r\n                        completed: res.data.completed || 0,\r\n                        reading: res.data.reading || 0,\r\n                        dropped: res.data.dropped || 0,\r\n                        on_hold: res.data.on_hold || 0,\r\n                        plan_to_read: res.data.plan_to_read || 0,\r\n                    })\r\n                    setJikanScoreStatusDataLoading(false)\r\n                }\r\n                else {\r\n                    setJikanScoreStatusDataLoading(false)\r\n                }\r\n            } catch (err) {\r\n                setJikanScoreStatusDataLoading(false)\r\n            }\r\n        }\r\n\r\n        async function getJikanCharactersData() {\r\n            try {\r\n                const res = await axios.get(jikanAPI({ contentType: \"manga\", contentId: mal_link.split(\"/\")[4], extraPath: \"characters\" }))\r\n\r\n                if (res.status === 200) {\r\n                    setJikanCharactersData(res.data.characters)\r\n                    setJikanCharacterStaffDataLoading(false)\r\n                }\r\n                else {\r\n                    setJikanCharacterStaffDataLoading(false)\r\n                }\r\n            } catch (err) {\r\n                setJikanCharacterStaffDataLoading(false)\r\n            }\r\n        }\r\n\r\n        getJikanStatusData()\r\n        getJikanCharactersData()\r\n    }, [])\r\n\r\n    function handleClose() {\r\n        return setAdultModal(state => (!state))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AdultModal open={adultModal} handleClose={handleClose} />\r\n            <div className={classes.Container}>\r\n                <Box className={classes.BackgroundContainer}>\r\n                    <Box className={classes.AnimeContainer}>\r\n                        <MotdContainer {...props} content_type=\"manga\" content_id={id} />\r\n                        <Box className={classes.TextContainer}>\r\n                            <Box mb={2}>\r\n                                <Typography variant=\"h4\" component=\"h6\" className={classes.PremieredContainer}>\r\n                                </Typography>\r\n                                {logoError ? (\r\n                                    <Typography variant=\"h3\" component=\"h1\">\r\n                                        {name}\r\n                                    </Typography>\r\n                                ) : (\r\n                                        <Box className={classes.LogoImage}>\r\n                                            <img\r\n                                                loading=\"lazy\"\r\n                                                alt=\"\"\r\n                                                src={contentLogo(\"manga\", slug)}\r\n                                                onError={(img) => {\r\n                                                    setLogoError(true)\r\n                                                    img.target.style.display =\r\n                                                        \"none\"\r\n                                                }}\r\n                                            ></img>\r\n                                        </Box>\r\n                                    )}\r\n                                <Typography\r\n                                    variant=\"body1\"\r\n                                    className={classes.SynopsisContainer}\r\n                                >\r\n                                    {synopsis ? synopsis : t('common:warnings.not_found_synopsis')}\r\n                                </Typography>\r\n                            </Box>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\">\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.translator', { count: translators.length })}\r\n                                    list={translators}\r\n                                />\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.editor', { count: editors.length })}\r\n                                    list={editors}\r\n                                />\r\n                            </Box>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\">\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.author', { count: authors.length })}\r\n                                    list={authors}\r\n                                />\r\n                                <MetadataContainer\r\n                                    title={t('common:ns.release_date')}\r\n                                    list={[\r\n                                        Format(\r\n                                            new Date(release_date)\r\n                                        ),\r\n                                    ]}\r\n                                />\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                {download_link ? (\r\n                                    <a\r\n                                        href={download_link}\r\n                                        target=\"_blank\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                    >\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            className={classes.ContentButton}\r\n                                        >\r\n                                            {t('common:ns.download')}\r\n                                        </Button>\r\n                                    </a>\r\n                                ) : null}\r\n                                {reader_link ? (\r\n                                    <a\r\n                                        href={reader_link}\r\n                                        target=\"_blank\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                    >\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            className={classes.ContentButton}\r\n                                        >\r\n                                            {t('common:ns.read')}\r\n                                        </Button>\r\n                                    </a>\r\n                                )\r\n                                    :\r\n                                    episode_count ?\r\n                                        <Link to={mangaEpisodePage(slug)}>\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                className={classes.ContentButton}\r\n                                            >\r\n                                                {t('common:ns.read')}\r\n                                            </Button>\r\n                                        </Link>\r\n                                        :\r\n                                        \"\"\r\n                                }\r\n                                {mal_link ? (\r\n                                    <a\r\n                                        href={mal_link}\r\n                                        target=\"_blank\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                    >\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            className={classes.ContentButton}\r\n                                        >\r\n                                            {t('common:ns.mal_page')}\r\n                                        </Button>\r\n                                    </a>\r\n                                ) : null}\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box className={classes.BackgroundImage}>\r\n                        {headerError ? (\r\n                            <img\r\n                                loading=\"lazy\"\r\n                                alt=\"\"\r\n                                src={contentCover(\"manga\", slug)}\r\n                                className={clsx(classes.CoverArtContainer, {\r\n                                    [classes.FallbackCoverArt]: headerError,\r\n                                })}\r\n                                onError={(img) => {\r\n                                    if (coverArtError) {\r\n                                        img.target.src = CoverPlaceholder\r\n                                        return null\r\n                                    }\r\n                                    img.target.src = cover_art\r\n                                    setCoverArtError(true)\r\n                                }}\r\n                            />\r\n                        ) : null}\r\n                        <img\r\n                            loading=\"lazy\"\r\n                            alt=\"\"\r\n                            src={contentHeader(\"manga\", slug)}\r\n                            className={clsx({\r\n                                [classes.FallbackBackgroundImage]: headerError,\r\n                            })}\r\n                            onError={(img) => {\r\n                                img.target.src = coverArtError ? cover_art : contentCover(\"manga\", slug)\r\n                                setHeaderError(true)\r\n                            }}\r\n                        ></img>\r\n                        <div className={classes.BackgroundImageOverlay} />\r\n                    </Box>\r\n                </Box>\r\n                <Box className={classes.MetadataContainer}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} md={4}>\r\n                            <MetadataContainer\r\n                                type=\"genres\"\r\n                                title={t('common:ns.genre', { count: genres.length })}\r\n                                list={genres}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4}>\r\n                            <MetadataContainer\r\n                                title={t('common:ns.series_status')}\r\n                                list={[t(`common:ns.${series_status}`)]}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4}>\r\n                            <MetadataContainer\r\n                                title={t('common:ns.trans_status')}\r\n                                list={[t(`common:ns.${trans_status}`)]}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                {/* Jikan Stats */}\r\n                <Box className={classes.JikanStatsContainer}>\r\n                    <Typography variant=\"h4\">\r\n                        {t('translations.anime.stats')}\r\n                    </Typography>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                            <JikanStatsScoresChart data={jikanScoreData} loading={jikanScoreStatusDataLoading} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                            <JikanStatsStatusChart data={jikanStatusData} loading={jikanScoreStatusDataLoading} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                            <CharactersStaffBox data={jikanCharactersData} type=\"staff\" loading={jikanCharacterStaffDataLoading} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Divider />\r\n                <div className={classes.BottomStuff}>\r\n                    {process.env.REACT_APP_DISQUS_SHORTNAME ? (\r\n                        <>\r\n                            <Box>\r\n                                <DisqusBox\r\n                                    config={{\r\n                                        identifier: \"manga/\" + id,\r\n                                        title: `${name} - ${process.env.REACT_APP_SITENAME} Manga`,\r\n                                    }}\r\n                                />\r\n                            </Box>\r\n                        </>\r\n                    ) : (\r\n                            \"\"\r\n                        )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction MetadataContainer(props) {\r\n    const { t } = useTranslation([\"components\", \"genres\"])\r\n    const { title, list, type } = props\r\n\r\n    function getRenderBox() {\r\n        switch (type) {\r\n            case \"genres\": {\r\n                return list.map((l, i) => `${t(`genres:${l}`)}${list.length - 1 !== i ? \", \" : \"\"}`)\r\n            }\r\n            default: {\r\n                return list.join(\", \")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box mr={1}>\r\n            <Typography variant=\"body1\" component=\"span\">\r\n                <b>{title}: </b>\r\n            </Typography>\r\n            {list.length !== 0 ? (\r\n                <Typography variant=\"body1\" component=\"span\">\r\n                    {getRenderBox()}\r\n                </Typography>\r\n            ) : (\r\n                    <Typography variant=\"body1\">{t('translations.warnings.content_metadata.not_found', { title: title })}</Typography>\r\n                )}\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction JikanStatsScoresChart(props) {\r\n    const { t } = useTranslation([\"common\", \"components\"])\r\n    const classes = useStyles()\r\n\r\n    const { data, loading } = props\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"body1\" align=\"left\" gutterBottom><b>{t(\"ns.score_distribution\")}</b></Typography>\r\n            {data.length ?\r\n                <div className={classes.JikanStatsScoresChart}>\r\n                    {data.length ? (\r\n                        <div style={{ height: 200 }}>\r\n                            <ResponsiveBar\r\n                                data={data}\r\n                                keys={[\"votes\"]}\r\n                                height={200}\r\n                                groupMode=\"stacked\"\r\n                                colors={d => getVoteColor({ value: d.index })}\r\n                                indexBy=\"score\"\r\n                                colorBy=\"index\"\r\n                                labelFormat={d => <tspan className={classes.JikanStatsScoresChartText} y={-10}>{d}</tspan>}\r\n                                labelTextColor={{ theme: 'labels.text.fill' }}\r\n                                enableGridY={false}\r\n                                margin={{ top: 30, right: 0, bottom: 30, left: 0 }}\r\n                                padding={0.6}\r\n                                isInteractive={false}\r\n                                axisTop={null}\r\n                                axisRight={null}\r\n                                axisLeft={null}\r\n                                axisBottom={{\r\n                                    tickSize: 0,\r\n                                    tickPadding: 10,\r\n                                    format: d => <tspan className={classes.JikanStatsScoresChartText}>{d}</tspan>\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                            \"\"\r\n                        )}\r\n                    <Typography variant=\"subtitle2\" align=\"right\">\r\n                        <a href=\"https://jikan.moe/\" target=\"_blank\" rel=\"noopener noreferrer\">jikan API</a>\r\n                    </Typography>\r\n                </div> :\r\n                loading ?\r\n                    <div className={classes.JikanDataErrorBox}>\r\n                        <Loading />\r\n                    </div>\r\n                    :\r\n                    <div className={classes.JikanDataErrorBox}>\r\n                        <WarningSharp fontSize=\"large\" />\r\n                        <Typography variant=\"body1\">\r\n                            {t(\"components:translations.jikan_errors.couldnt_reach_data\")}\r\n                        </Typography>\r\n                    </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction JikanStatsStatusChart(props) {\r\n    const { t } = useTranslation([\"common\", \"components\"])\r\n    const classes = useStyles()\r\n    const { data, loading } = props\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"body1\" align=\"left\" gutterBottom><b>{t(\"ns.status_distribution\")}</b></Typography>\r\n            {Object.keys(data).length ?\r\n                <div className={classes.JikanStatsStatusChart}>\r\n                    <div className={classes.JikanStatsStatusChartList}>\r\n                        {Object.keys(data).map(key => (\r\n                            <div key={key} className={classes.JikanStatsStatusChartItem}>\r\n                                <div style={{ backgroundColor: getStatusColor({ value: key }) }} className={classes.JikanStatsStatusChartItemHeaderText}>\r\n                                    <Typography variant=\"body2\">\r\n                                        <b>{t(`ns.${key}`)}</b>\r\n                                    </Typography>\r\n                                </div>\r\n                                <div>\r\n                                    {data[key]}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <Typography variant=\"subtitle2\" align=\"right\">\r\n                        <a href=\"https://jikan.moe/\" target=\"_blank\" rel=\"noopener noreferrer\">jikan API</a>\r\n                    </Typography>\r\n                </div> :\r\n                loading ?\r\n                    <div className={classes.JikanDataErrorBox}>\r\n                        <Loading />\r\n                    </div>\r\n                    :\r\n                    <div className={classes.JikanDataErrorBox}>\r\n                        <WarningSharp fontSize=\"large\" />\r\n                        <Typography variant=\"body1\">\r\n                            {t(\"components:translations.jikan_errors.couldnt_reach_data\")}\r\n                        </Typography>\r\n                    </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction PVBox(props) {\r\n    const { t } = useTranslation([\"common\", \"components\"])\r\n    const classes = useStyles()\r\n    let { link } = props\r\n\r\n    if (link) {\r\n        var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\??v?=?))([^#\\&\\?]*).*/\r\n        let match = link.match(regExp);\r\n        if (match && match[7].length === 11) link = youtubeEmbedLink({ videoId: match[7] })\r\n        else link = \"\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"body1\" align=\"left\" gutterBottom><b>{t(\"ns.youtube_preview\")}</b></Typography>\r\n            {link ?\r\n                <>\r\n\r\n                    <div className={classes.YoutubePreview}>\r\n                        <iframe\r\n                            width=\"100%\"\r\n                            height=\"250\"\r\n                            title={link}\r\n                            src={link}\r\n                            frameBorder=\"0\"\r\n                            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                            allowFullScreen\r\n                        />\r\n                    </div>\r\n                </>\r\n                :\r\n                <>\r\n                    <div className={classes.JikanDataErrorBox}>\r\n                        <WarningSharp fontSize=\"large\" />\r\n                        <Typography variant=\"body1\">\r\n                            {t(\"components:translations.warnings.youtube_pv.not_found\")}\r\n                        </Typography>\r\n                    </div>\r\n                </>}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CharactersStaffBox(props) {\r\n    const { t } = useTranslation(\"common\")\r\n    const classes = useStyles()\r\n    const [open, setOpen] = useState(false)\r\n    const [currentData, setCurrentData] = useState([])\r\n\r\n    let { data, type, loading } = props\r\n\r\n    useEffect(() => {\r\n        if (!open) setCurrentData(Slice(data, 0, 6))\r\n        else setCurrentData(data)\r\n    }, [open, data])\r\n\r\n    function handleOpenButton() {\r\n        setOpen(state => !state)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"body1\" align=\"left\" gutterBottom><b>{t(`ns.${type}`)}</b></Typography>\r\n            {currentData.length ?\r\n                <>\r\n                    <div className={classes.CharactersStaffBoxList}>\r\n                        {currentData.map(d => {\r\n                            const va = Find(d.voice_actors, { language: \"Japanese\" })\r\n                            return (\r\n                                <div key={d.url} className={`${classes.CharactersStaffBoxItem} ${type === \"characters\" ? `${classes.CharactersStaffBoxCharacter}` : `${classes.CharactersStaffBoxStaff}`} `}>\r\n                                    <div className={`${classes.CharactersStaffBoxItemCharacter} ${type === \"characters\" ? \"chr\" : `${classes.CharactersStaffBoxStaffOverride} stff`} `}>\r\n                                        <a href={d.url} target=\"_blank\" rel=\"noopener noreferrer\" >\r\n                                            <div style={{ backgroundImage: `url(${d.image_url})` }} className={classes.CharactersStaffBoxItemImage} />\r\n                                        </a>\r\n                                        <div className={classes.CharactersStaffBoxItemText}>\r\n                                            <Typography variant=\"subtitle2\">\r\n                                                <a href={d.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                    <Dotdotdot clamp={3} useNativeClamp>\r\n                                                        {d.name.replace(\",\", \"\")}\r\n                                                    </Dotdotdot>\r\n                                                </a>\r\n                                            </Typography>\r\n                                            {d.role ?\r\n                                                <Typography variant=\"subtitle2\">\r\n                                                    <a href={d.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                        <Dotdotdot clamp={3} useNativeClamp>\r\n                                                            {d.role}\r\n                                                        </Dotdotdot>\r\n                                                    </a>\r\n                                                </Typography> : \"\"\r\n                                            }\r\n                                            {d.positions ?\r\n                                                <Typography variant=\"subtitle2\">\r\n                                                    <a href={d.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                        {d.positions ? d.positions.map((p, i) => d.positions.length - 1 !== i ? `${p}, ` : `${p} `) : \"\"}\r\n                                                    </a>\r\n                                                </Typography>\r\n                                                : \"\"}\r\n                                        </div>\r\n                                    </div>\r\n                                    {type === \"characters\" && va && open ?\r\n                                        <div className={`${classes.CharactersStaffBoxItemStaff} stff`}>\r\n                                            <div className={classes.CharactersStaffBoxItemText}>\r\n                                                <Typography variant=\"subtitle2\">\r\n                                                    <a href={va.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                        {va ? va.name.replace(\",\", \"\") : \"\"}\r\n                                                    </a>\r\n                                                </Typography>\r\n                                            </div>\r\n                                            <a href={va.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                <div style={{ backgroundImage: `url(${va ? va.image_url : \"\"})` }} className={classes.CharactersStaffBoxItemImage} />\r\n                                            </a>\r\n                                        </div> :\r\n                                        \"\"}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    {data.length > 6 ?\r\n                        <div className={classes.CharactersStaffBoxShowMore}>\r\n                            <Button variant=\"outlined\" size=\"small\" onClick={handleOpenButton}>\r\n                                {open ? t(\"ns.show_less\") : t(\"ns.show_more\")}\r\n                            </Button>\r\n                        </div>\r\n                        : \"\"}\r\n                    <Typography variant=\"subtitle2\" align=\"right\">\r\n                        <a href=\"https://jikan.moe/\" target=\"_blank\" rel=\"noopener noreferrer\">jikan API</a>\r\n                    </Typography>\r\n                </>\r\n                : loading ?\r\n                    <div className={classes.JikanDataErrorBox}>\r\n                        <Loading />\r\n                    </div>\r\n                    :\r\n                    <div className={classes.JikanDataErrorBox}>\r\n                        <WarningSharp fontSize=\"large\" />\r\n                        <Typography variant=\"body1\">\r\n                            {t(\"components:translations.jikan_errors.couldnt_reach_data\")}\r\n                        </Typography>\r\n                    </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction AdultModal(props) {\r\n    const { t } = useTranslation('components')\r\n    const classes = useStyles()\r\n    const { open, handleClose } = props\r\n\r\n    useEffect(() => {\r\n        if (open)\r\n            document.getElementById(\"scroll-node\").style.filter = \"blur(50px)\"\r\n        else document.getElementById(\"scroll-node\").style.removeProperty('filter')\r\n        return function cleanup() {\r\n            document.getElementById(\"scroll-node\").style.removeProperty('filter')\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Modal\r\n            className={classes.Modal}\r\n            open={open}\r\n        >\r\n            <div className={classes.ModalContainer}>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                    {t('translations.warnings.+18.header_text')}\r\n                </Typography>\r\n                <Link to=\"/\">\r\n                    <Button variant=\"outlined\" style={{ marginRight: 8 }}>\r\n                        {t('translations.buttons.+18.no')}\r\n                    </Button>\r\n                </Link>\r\n                <Button variant=\"outlined\" style={{ color: \"red\" }} onClick={handleClose}>\r\n                    {t('translations.buttons.+18.yes')}\r\n                </Button>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nfunction getVoteColor({ value }) {\r\n    switch (String(value + 1)) {\r\n        case \"1\": {\r\n            return \"hsl(10, 65%, 50%)\"\r\n        }\r\n        case \"2\": {\r\n            return \"hsl(20, 65%, 50%)\"\r\n        }\r\n        case \"3\": {\r\n            return \"hsl(30, 65%, 50%)\"\r\n        }\r\n        case \"4\": {\r\n            return \"hsl(40, 65%, 50%)\"\r\n        }\r\n        case \"5\": {\r\n            return \"hsl(50, 65%, 50%)\"\r\n        }\r\n        case \"6\": {\r\n            return \"hsl(60, 65%, 50%)\"\r\n        }\r\n        case \"7\": {\r\n            return \"hsl(70, 65%, 50%)\"\r\n        }\r\n        case \"8\": {\r\n            return \"hsl(80, 65%, 50%)\"\r\n        }\r\n        case \"9\": {\r\n            return \"hsl(90, 65%, 50%)\"\r\n        }\r\n        case \"10\": {\r\n            return \"hsl(100, 65%, 50%)\"\r\n        }\r\n        default: {\r\n            return \"hsl(10, 65%, 50%)\"\r\n        }\r\n    }\r\n}\r\n\r\nfunction getStatusColor({ value }) {\r\n    const hue = 700\r\n\r\n    switch (value) {\r\n        case \"completed\": {\r\n            return lime[hue]\r\n        }\r\n        case \"dropped\": {\r\n            return purple[hue]\r\n        }\r\n        case \"plan_to_watch\": {\r\n            return blue[hue]\r\n        }\r\n        case \"plan_to_read\": {\r\n            return blue[hue]\r\n        }\r\n        case \"on_hold\": {\r\n            return grey[hue]\r\n        }\r\n        case \"watching\": {\r\n            return red[hue]\r\n        }\r\n        case \"reading\": {\r\n            return red[hue]\r\n        }\r\n        default: {\r\n            return red[900]\r\n        }\r\n    }\r\n}\r\n\r\nexport { AnimePage, MangaPage, JikanStatsScoresChart }\r\n","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\helmet\\index.js",["309"],"import React from 'react'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { logoRoute } from '../../config/front-routes'\r\n\r\nexport default function (props) {\r\n    const { title, desc, url, type } = props\r\n\r\n    return (\r\n        <Helmet>\r\n            <title>{title || `${process.env.REACT_APP_SITENAME} ${process.env.REACT_APP_INDEX_TITLE_TEXT}`}</title>\r\n            <meta name=\"title\" content={title || `${process.env.REACT_APP_SITENAME} ${process.env.REACT_APP_INDEX_TITLE_TEXT}`} />\r\n            <meta name=\"description\" content={desc || process.env.REACT_APP_META_DESCRIPTION} />\r\n            <meta name=\"keywords\" content={props.keywords || process.env.REACT_APP_META_KEYWORDS} />\r\n            {props.twitter_card ? <meta property=\"og:image:width\" content=\"1200\" /> : \"\"}\r\n            {props.twitter_card ? <meta property=\"og:image:height\" content=\"628\" /> : \"\"}\r\n            <meta property=\"og:type\" content={type || \"website\"} />\r\n            <meta property=\"og:url\" content={process.env.REACT_APP_SITEURL + (url || \"/\")} />\r\n            <meta property=\"og:title\" content={title || `${process.env.REACT_APP_SITENAME} ${process.env.REACT_APP_INDEX_TITLE_TEXT}`} />\r\n            <meta property=\"og:description\" content={desc || process.env.REACT_APP_META_DESCRIPTION} />\r\n            <meta property=\"og:image\" content={props.image || process.env.REACT_APP_SITEURL + logoRoute} />\r\n            <meta property=\"twitter:card\" content={props.twitter_card ? \"summary_large_image\" : \"summary\"} />\r\n            <meta property=\"twitter:url\" content={process.env.REACT_APP_SITEURL + (url || \"/\")} />\r\n            <meta property=\"twitter:title\" content={title || `${process.env.REACT_APP_SITENAME} ${process.env.REACT_APP_INDEX_TITLE_TEXT}`} />\r\n            <meta property=\"twitter:description\" content={desc || process.env.REACT_APP_META_DESCRIPTION} />\r\n            <meta property=\"twitter:image\" content={props.image || process.env.REACT_APP_SITEURL + logoRoute} />\r\n        </Helmet>\r\n    )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\disqus\\disqus.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\warningerrorbox\\warning.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\manga-episode\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\calendar\\index.js",["310","311"],"import React, { useEffect } from 'react'\r\nimport { Button, Divider, makeStyles, Typography } from '@material-ui/core'\r\nimport { CoverPlaceholder } from '../../config/theming/images'\r\nimport Dotdotdot from 'react-dotdotdot'\r\nimport clsx from 'clsx'\r\n\r\nimport addDays from 'date-fns/addDays'\r\nimport format from 'date-fns/format'\r\nimport isSameDay from 'date-fns/isSameDay'\r\nimport isFuture from 'date-fns/isFuture'\r\nimport getDay from 'date-fns/getDay'\r\nimport parseISO from 'date-fns/parseISO'\r\n\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Link } from 'react-router-dom'\r\nimport { animePage } from '../../config/front-routes'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    CalendarDays: {\r\n        display: \"flex\",\r\n        marginBottom: theme.spacing(2),\r\n        overflowX: \"auto\",\r\n        overflowY: \"hidden\",\r\n        \"& .MuiButton-root\": {\r\n            borderRadius: 0\r\n        }\r\n    },\r\n    CalendarDaysItem: {\r\n        display: \"flex\",\r\n        cursor: \"pointer\",\r\n        padding: theme.spacing(0, 2),\r\n        \"&:first-child\": {\r\n            padding: theme.spacing(0, 2, 0, 0)\r\n        },\r\n        \"&:last-child\": {\r\n            padding: theme.spacing(0, 0, 0, 2)\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: theme.spacing(1)\r\n        }\r\n    },\r\n    CalendarDaysButton: {\r\n        \"& span\": {\r\n            fontWeight: \"400\"\r\n        }\r\n    },\r\n    CalendarDaysSameDay: {\r\n        \"& span\": {\r\n            fontWeight: \"600\"\r\n        },\r\n        \"& p\": {\r\n            fontWeight: \"600\"\r\n        }\r\n    },\r\n    CalendarDayPanel: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(4, 1fr)\",\r\n        gridGap: theme.spacing(4),\r\n        [theme.breakpoints.down(\"lg\")]: {\r\n            gridTemplateColumns: \"repeat(3, 1fr)\"\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            gridGap: theme.spacing(2),\r\n            gridTemplateColumns: \"repeat(1, 1fr)\"\r\n        }\r\n    },\r\n    CalendarItem: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    CalendarItemContainer: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: `${theme.spacing(16)}px auto`,\r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[6],\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: `${theme.spacing(12)}px auto`\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            gridTemplateColumns: `${theme.spacing(16)}px auto`\r\n        }\r\n    },\r\n    CalendarItemCoverArt: {\r\n        height: 180,\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            height: 140,\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            height: 180,\r\n        }\r\n    },\r\n    CalendarItemText: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(2)\r\n    },\r\n    CalendarItemTime: {\r\n        [theme.breakpoints.down(\"md\")]: {\r\n        },\r\n        [theme.breakpoints.down(\"md\")]: {\r\n        }\r\n    }\r\n}))\r\n\r\nfunction CalendarDays(props) {\r\n    const classes = useStyles()\r\n    const { t } = useTranslation(['days', 'common'])\r\n    const { firstDayOfWeek, todayDate, selectedDay, setSelectedDay, dayList } = props\r\n\r\n    useEffect(() => {\r\n        const sameDayCheck = isSameDay(new Date(), todayDate)\r\n\r\n        if (sameDayCheck) setSelectedDay(getDay(todayDate))\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.CalendarDays}>\r\n                {\r\n                    dayList.map((item, index) => {\r\n                        const date = addDays(firstDayOfWeek, index)\r\n                        return (\r\n                            <React.Fragment key={date}>\r\n                                <div className={classes.CalendarDaysItem}>\r\n                                    <div onClick={() => setSelectedDay(item)}>\r\n                                        <div className={clsx(classes.CalendarDaysButton, {\r\n                                            [classes.CalendarDaysSameDay]: selectedDay === item\r\n                                        })}>\r\n                                            <Typography variant=\"body1\" align=\"right\">\r\n                                                {format(date, t('common:calendar_date_format'))}\r\n                                            </Typography>\r\n                                            <Typography variant=\"h4\" component=\"span\">\r\n                                                {t(`${item}`)}\r\n                                            </Typography>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {index !== dayList.length - 1\r\n                                    ? <Divider orientation=\"vertical\" flexItem />\r\n                                    : \"\"}\r\n                            </React.Fragment>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CalendarDayPanel(props) {\r\n    const classes = useStyles()\r\n    const { items } = props\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.CalendarDayPanel}>\r\n                {items.map(item => <CalendarItem\r\n                    key={item.name}\r\n                    {...item}\r\n                    time={item.release_date}\r\n                    classes={classes} />)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CalendarItem(props) {\r\n    const { t } = useTranslation('common')\r\n    const { name, episodes, cover_art, release_date, time, slug, classes } = props\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.CalendarItem}>\r\n                <div className={classes.CalendarItemTime}>\r\n                    {time ?\r\n                        <Typography variant=\"h4\">\r\n                            {format(parseISO(time), \"HH:mm\")}\r\n                        </Typography>\r\n                        : \"\"\r\n                    }\r\n\r\n                </div>\r\n                <div className={classes.CalendarItemContainer}>\r\n                    <Link to={animePage(slug)}>\r\n                        <div className={classes.CalendarItemCoverArt} style={{ backgroundImage: `url(\"${cover_art || CoverPlaceholder}\")` }} />\r\n                    </Link>\r\n                    <div className={classes.CalendarItemText}>\r\n                        <Link to={animePage(slug)}>\r\n                            <Dotdotdot clamp={2} useNativeClamp>\r\n                                <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                                    {name || \"\"}\r\n                                </Typography>\r\n                            </Dotdotdot>\r\n                        </Link>\r\n                        <Dotdotdot clamp={1} useNativeClamp>\r\n                            <Typography variant=\"h4\" component=\"span\">\r\n                                {episodes.length ? t('episode.episode_title', { episode_number: Number(episodes[0].episode_number) + 1 }) : t('episode.episode_title', { episode_number: 1 })}\r\n                            </Typography>\r\n                        </Dotdotdot>\r\n                        {isFuture(new Date(release_date)) ?\r\n                            <Typography variant=\"body1\" component=\"span\">\r\n                                {t('ns.release_date')}: {format(new Date(release_date), t('date_format'))}\r\n                            </Typography>\r\n                            : \"\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport { CalendarDays, CalendarDayPanel }","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\motd\\index.js",["312","313"],"import React, { useEffect, useState } from 'react'\r\nimport { useGlobal, useDispatch } from 'reactn'\r\nimport { Typography, makeStyles, Button } from '@material-ui/core'\r\nimport { Close as CloseIcon } from '@material-ui/icons'\r\nimport axios from '../../config/axios/axios'\r\nimport Markdown from '../markdown/markdown'\r\nimport { getMotdInfo } from '../../config/api-routes'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    MotdSection: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    MotdContainer: {\r\n        padding: theme.spacing(2),\r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[6],\r\n        marginBottom: theme.spacing(2),\r\n        position: \"relative\"\r\n    },\r\n    CloseButton: {\r\n        position: \"absolute\",\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1)\r\n    }\r\n}))\r\n\r\nexport default function MotdContainer(props) {\r\n    const { t } = useTranslation('components')\r\n    const classes = useStyles()\r\n    const [data, setData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [closedMotd] = useGlobal('motd')\r\n    const setMotd = useDispatch('setMotd')\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const res = await axios(\r\n                getMotdInfo({\r\n                    content_id: props.content_id ? props.content_id : null,\r\n                    content_type: props.content_type ? props.content_type : null\r\n                }),\r\n            ).catch(res => res)\r\n\r\n            if (res.status === 200) {\r\n                setData(res.data)\r\n            }\r\n            setLoading(false)\r\n        }\r\n\r\n        fetchData()\r\n    }, [props.content_id])\r\n\r\n    if ((props.type === \"episode\" || props.type === \"manga-episode\") && (!props.content_type || !props.content_id)) {\r\n        return (\"\")\r\n    }\r\n\r\n    let MotdList = []\r\n\r\n    if (!loading && data.length !== 0) {\r\n        data.map(d => {\r\n            if (closedMotd.indexOf(d.id) !== -1) return\r\n            MotdList.push(\r\n                <div className={classes.MotdContainer} key={d.id}>\r\n                    {d.title ?\r\n                        <Typography variant=\"h4\" component=\"p\">\r\n                            {d.title}\r\n                        </Typography>\r\n                        :\r\n                        \"\"}\r\n                    <Markdown>\r\n                        {d.subtitle ? d.subtitle : t('motd.warnings.error')}\r\n                    </Markdown>\r\n                    {d.can_user_dismiss ?\r\n                        <Button onClick={() => setMotd(d.id)} size=\"small\" className={classes.CloseButton}>\r\n                            <CloseIcon fontSize=\"small\" />\r\n                        </Button>\r\n                        : \"\"}\r\n                </div>\r\n            )\r\n            return null\r\n        })\r\n    }\r\n\r\n    return (\r\n        MotdList.length !== 0 ?\r\n            <>\r\n                <section className={classes.MotdSection}>\r\n                    {MotdList}\r\n                </section>\r\n            </>\r\n            :\r\n            \"\"\r\n    )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\episode-title-parser.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\date-fns\\format.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\markdown\\markdown.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ceviriler\\styles.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\drawer_items.js",["314"],"// Bu dosyayı drawerınıza herhangi bir link eklemek için kullanabilirsiniz.\r\n// Array içerisine koyacağınız objenin \r\n// {\r\n//  icon: \"\",           // Yazı solundaki ikon.\r\n//  title: \"\",          // Drawer açıkken gözükecek text.\r\n//  short_title: \"\",    // Drawer kapalıyken ikon altında gözükecek text.\r\n//  link: \"\"            // Sekmenin göstereceği yol. \r\n// } \r\n// biçiminde olması gerekiyor.\r\n//\r\n// Not: icon kısmında FontAwesomeIcon componentı kullanabilirsiniz. Örn:\r\n//\r\n//\r\n//  {\r\n//      icon: <FontAwesomeIcon icon={faDiscord} size=\"2x\" />,\r\n//      title: \"Discord sunucumuza katılın!\",\r\n//      short_title: \"Discord\"\r\n//      link: \"https://discord.gg/davetkodu\"\r\n//  }\r\n\r\nimport React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDiscord } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport default [\r\n    {\r\n        icon: <FontAwesomeIcon icon={faDiscord} size=\"2x\" />,\r\n        title: \"Discord sunucumuza katılın!\",\r\n        short_title: \"Discord\",\r\n        link: \"https://discord.gg/davetkodu\"\r\n    }\r\n]","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ceviriler\\anime\\download-links.js",[],["315","316"],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\header\\styles.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\footer\\footer.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\episode-link-overrides.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\warningerrorbox\\error.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\recruitment_panels.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\episode\\components.js",["317"],"import React from 'react'\r\nimport { Button, makeStyles } from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\nimport EpisodeTitleParser from '../../config/episode-title-parser'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    Container: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            display: \"flex\",\r\n            overflowX: \"auto\",\r\n            width: \"fit-content\"\r\n        }\r\n    },\r\n    Iframe: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\"\r\n    },\r\n    IframeContainer: {\r\n        position: \"relative\",\r\n        paddingBottom: \"56.25%\",\r\n        height: 0,\r\n        overflow: \"hidden\"\r\n    },\r\n    IframePlaceholder: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        zIndex: 2,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    FallbackContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\"\r\n    },\r\n    LinksContainer: {\r\n        '& button': {\r\n            marginBottom: 4,\r\n            marginRight: 4\r\n        },\r\n\r\n        [theme.breakpoints.down('sm')]: {\r\n            display: \"block\",\r\n            overflow: \"auto\",\r\n            animation: \"none\",\r\n            right: 20,\r\n            marginRight: 0\r\n        }\r\n    },\r\n    LinksContainerOpen: {\r\n        opacity: 1\r\n    },\r\n    LinksContainerClose: {\r\n        opacity: 0\r\n    },\r\n    LinksButtonContainer: {\r\n        marginBottom: -4\r\n    },\r\n    LinksButton: {\r\n        '&:last-child': {\r\n            marginRight: 0\r\n        },\r\n        '& span': {\r\n            fontSize: \".7rem\"\r\n        }\r\n    },\r\n    MetadataContainer: {\r\n        '& img': {\r\n            width: \"100%\",\r\n            marginBottom: -5\r\n        }\r\n    },\r\n    EpisodeContainer: {\r\n        maxHeight: 200,\r\n        overflow: \"auto\",\r\n        \"&::-webkit-scrollbar\": {\r\n            width: 3,\r\n        },\r\n        \"&::-webkit-scrollbar-thumb\": {\r\n            marginTop: 0,\r\n            backgroundColor: theme.palette.primary.main\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            marginTop: 0\r\n        }\r\n    },\r\n    EpisodeButtons: {\r\n        marginBottom: \"5px!important\"\r\n    }\r\n}))\r\n\r\nconst defaultBoxProps = {\r\n    boxShadow: 2, bgcolor: \"background.paper\"\r\n}\r\n\r\nfunction EpisodeButton(props) {\r\n    const classes = useStyles()\r\n    const { activeEpisode } = props\r\n    let { slug, title, data } = EpisodeTitleParser(props.anime_name, props.episode_number, props.special_type)\r\n\r\n    return (\r\n        <Button\r\n            className={classes.EpisodeButtons}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            onClick={() => props.handleEpisodeClick(slug, title, data, props.credits, props.created_time, props.id)}\r\n            color={props.special_type === activeEpisode.special_type && props.episode_number === activeEpisode.episode_number ? \"secondary\" : \"default\"}\r\n            key={props.id}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport {\r\n    useStyles,\r\n    EpisodeButton,\r\n    defaultBoxProps\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\ara\\components.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\footer\\language-selector.js",["318","319"],"import React, { useState } from 'react'\r\nimport { useGlobal, useDispatch } from 'reactn'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Input from '@material-ui/core/Input'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\n// Import country flags\r\nimport countryFlagTR from 'flag-icon-css/flags/4x3/tr.svg'\r\nimport countryFlagEN from 'flag-icon-css/flags/4x3/us.svg'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    formControl: {\r\n        width: \"100%\"\r\n    },\r\n    MenuItem: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        \"& img\": {\r\n            marginRight: theme.spacing(1)\r\n        }\r\n    },\r\n    selectMenu: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        \"& img\": {\r\n            marginRight: theme.spacing(1)\r\n        }\r\n    },\r\n    dialogTitleRoot: {\r\n        padding: `${theme.spacing(2)}px ${theme.spacing(3)}px 0`\r\n    },\r\n    actionsSpacing: {\r\n        padding: `${theme.spacing(2)}px ${theme.spacing(3)}px`\r\n    }\r\n}));\r\n\r\nexport default function LanguageSelector() {\r\n    const { t } = useTranslation(['components', 'common'])\r\n    const classes = useStyles()\r\n    const [open, setOpen] = useState(false)\r\n    const [settings] = useGlobal('settings')\r\n    const setSettings = useDispatch('setSettings')\r\n\r\n    const handleChange = (event) => {\r\n        setSettings(\"language\", event.target.value || 'eng')\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={handleClickOpen}>{t('footer.change_language')}</Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle classes={{ root: classes.dialogTitleRoot }}>{t('footer.select_the_language_you_wish_to_use')}</DialogTitle>\r\n                <DialogContent>\r\n                    <form className={classes.container}>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel htmlFor=\"language_selector\">{t('common:ns.language')}</InputLabel>\r\n                            <Select\r\n                                fullWidth\r\n                                value={settings.language}\r\n                                onChange={handleChange}\r\n                                classes={{ selectMenu: classes.selectMenu }}\r\n                                input={<Input id=\"language_selector\" />}\r\n                            >\r\n                                <MenuItem value={\"tr\"} className={classes.MenuItem}><img src={countryFlagTR} height=\"21px\" /> Türkçe</MenuItem>\r\n                                <MenuItem value={\"en\"} className={classes.MenuItem}><img src={countryFlagEN} height=\"21px\" /> English</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions classes={{ spacing: classes.actionsSpacing }}>\r\n                    <Button variant=\"outlined\" onClick={handleClose} color=\"primary\">\r\n                        {t('common:ns.cancel')}\r\n                    </Button>\r\n                    <Button variant=\"outlined\" onClick={handleClose} color=\"primary\">\r\n                        {t('common:ns.change')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\config\\footer_items.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\index.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestmangaepisode.js",["320"],"import React from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\nimport { mangaEpisodePage } from '../../../config/front-routes'\r\n\r\nimport { Grid, Typography, makeStyles } from '@material-ui/core'\r\nimport { grey } from '@material-ui/core/colors'\r\n\r\nimport Format from '../../date-fns/format'\r\nimport { CoverPlaceholder } from '../../../config/theming/images'\r\nimport { contentCover } from '../../../config/api-routes'\r\nimport { useState } from 'reactn'\r\nimport { Skeleton } from '@material-ui/lab'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    Container: {\r\n        position: \"relative\"\r\n    },\r\n    Image: {\r\n        position: \"relative\",\r\n        paddingBottom: \"140%\",\r\n        overflow: \"hidden\",\r\n        boxShadow: theme.shadows[6],\r\n        '& img': {\r\n            position: \"absolute\",\r\n            objectFit: \"cover\",\r\n            width: \"100%\",\r\n            height: \"100%\"\r\n        }\r\n    },\r\n    Title: {\r\n        fontSize: \"0.875rem\"\r\n    },\r\n    Metadata: {\r\n        padding: `${theme.spacing(1)}px 0`,\r\n        color: theme.palette.type === \"dark\" ? \"inherit\" : grey[700],\r\n        '& *': {\r\n            fontFamily: \"'Overpass', sans-serif\"\r\n        },\r\n        \"& .MuiTypography-body1\": {\r\n            fontWeight: \"bold\"\r\n        }\r\n    }\r\n}))\r\n\r\nexport const LoadingDivMangaEpisode = (key) =>\r\n    <Skeleton width=\"100%\" style={{ paddingBottom: \"140%\" }} variant=\"rect\" />\r\n\r\nexport default function LatestMangaEpisode(props) {\r\n    const { t } = useTranslation('common')\r\n    const classes = useStyles()\r\n    const { manga_name, manga_cover, manga_slug, episode_number, episode_name, created_by, created_time } = props\r\n    const [imageError, setImageError] = useState(false)\r\n\r\n    const formattedDate = Format(new Date(created_time)).toUpperCase()\r\n\r\n    return (\r\n        <>\r\n            <Link to={mangaEpisodePage(manga_slug, episode_number)}>\r\n                <Grid container className={classes.Container}>\r\n                    <Grid item xs={12} className={classes.Image}>\r\n                        <img\r\n                            src={contentCover(\"manga\", manga_slug)}\r\n                            onError={img => {\r\n                                img.target.onerror = null\r\n                                if (imageError) return img.target.src = CoverPlaceholder\r\n                                img.target.src = manga_cover\r\n                                setImageError(true)\r\n                            }}\r\n                            alt=\"\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.Metadata}>\r\n                        <Typography variant=\"body1\" className={classes.Title}>\r\n                            {t('episode.episode_title', { episode_number: episode_number })}{episode_name ? `: ${episode_name}` : \"\"}\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\">\r\n                            {formattedDate} - {created_by}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Link>\r\n        </>\r\n    )\r\n}\r\n\r\nLatestMangaEpisode.propTypes = {\r\n    manga_name: propTypes.string.isRequired,\r\n    manga_cover: propTypes.string.isRequired,\r\n    manga_slug: propTypes.string.isRequired,\r\n    episode_number: propTypes.string.isRequired,\r\n    episode_name: propTypes.string,\r\n    created_by: propTypes.string.isRequired,\r\n    created_time: propTypes.string.isRequired\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestepisode.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestanimanga.js",[],"C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\latest\\latestbatchlinks.js",["321"],"import React from 'react'\r\n\r\nimport Dotdotdot from 'react-dotdotdot'\r\nimport { Link } from 'react-router-dom'\r\nimport { Typography, Grid, makeStyles, fade } from '@material-ui/core'\r\nimport { animePage } from '../../../config/front-routes'\r\nimport { contentHeader } from '../../../config/api-routes'\r\nimport { HeaderPlaceholder } from '../../../config/theming/images'\r\nimport { Skeleton } from '@material-ui/lab'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    Container: {\r\n        position: \"relative\",\r\n        '&:hover': {\r\n            '& $Backdrop': {\r\n                opacity: 0.3\r\n            },\r\n            '& $Text': {\r\n                opacity: 0\r\n            }\r\n        }\r\n    },\r\n    ImageContainer: {\r\n        position: \"relative\",\r\n        boxShadow: theme.shadows[6],\r\n        paddingBottom: \"25%\",\r\n        overflow: \"hidden\",\r\n        '& img': {\r\n            position: \"absolute\",\r\n            objectFit: \"cover\",\r\n            width: \"100%\",\r\n            marginTop: \"-12%\"\r\n        }\r\n    },\r\n    Text: {\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        zIndex: 3,\r\n        padding: `0 ${theme.spacing(1)}px`,\r\n        opacity: 1,\r\n        transition: theme.transitions.create([\"opacity\"], { easing: theme.transitions.easing.easeInOut, duration: theme.transitions.duration.short })\r\n    },\r\n    Backdrop: {\r\n        position: \"absolute\",\r\n        backgroundColor: fade(theme.palette.background.default, 0.7),\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        top: 0,\r\n        left: 0,\r\n        zIndex: 2,\r\n        opacity: 1,\r\n        transition: theme.transitions.create([\"opacity\"], { easing: theme.transitions.easing.easeInOut, duration: theme.transitions.duration.short })\r\n    }\r\n}))\r\n\r\nexport default (props) => {\r\n    const { anime_slug, anime_name, loading } = props\r\n    const classes = useStyles(props)\r\n\r\n    if (loading) {\r\n        return (\r\n            <Grid item xs={6} md={4} lg={2}>\r\n                <Skeleton variant=\"rect\" width=\"100%\" style={{ paddingBottom: \"25%\" }} />\r\n            </Grid>\r\n        )\r\n    }\r\n    else\r\n        return (\r\n            <>\r\n                <Grid item xs={6} md={4} lg={2}>\r\n                    <Link to={animePage(anime_slug)}>\r\n                        <div className={classes.Container}>\r\n                            <div className={classes.ImageContainer}>\r\n                                <img src={contentHeader(\"anime\", anime_slug)} onError={img => {\r\n                                    img.target.onerror = null\r\n                                    img.target.src = HeaderPlaceholder\r\n                                }} alt=\"\" />\r\n                            </div>\r\n                            <div className={classes.Text}>\r\n                                <Dotdotdot clamp={1} useNativeClamp>\r\n                                    <Typography variant=\"h6\">\r\n                                        {anime_name}\r\n                                    </Typography>\r\n                                </Dotdotdot>\r\n                            </div>\r\n                            <div className={classes.Backdrop} />\r\n                        </div>\r\n                    </Link>\r\n                </Grid>\r\n            </>\r\n        )\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\featured\\FeaturedContainer.js",["322"],"import React, { useState, useEffect } from 'react'\r\nimport { useSwipeable } from 'react-swipeable';\r\n\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport ReactInterval from 'react-interval';\r\n\r\n\r\nimport Featured, { FeaturedLoading } from './featured'\r\nimport { makeStyles, Box, fade } from '@material-ui/core'\r\nimport { NavigateBefore, NavigateNext } from '@material-ui/icons'\r\n\r\nexport const Swipeable = ({ children, ...props }) => {\r\n    const handlers = useSwipeable(props);\r\n    return (<div {...handlers}>{children}</div>);\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    FeaturedContainer: {\r\n        position: \"relative\",\r\n        marginBottom: theme.spacing(4)\r\n    },\r\n    FeaturedComponent: {\r\n        boxShadow: theme.shadows[6],\r\n        \"&:hover\": {\r\n            '& $PaginationButton': {\r\n                opacity: 1\r\n            }\r\n        }\r\n    },\r\n    PaginationButtonContainer: {\r\n        zIndex: 3\r\n    },\r\n    PaginationButton: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        position: \"absolute\",\r\n        transition: theme.transitions.create([\"opacity\"], { easing: theme.transitions.easing.easeInOut, duration: theme.transitions.duration.short }),\r\n        backgroundColor: fade(theme.palette.background.paper, 0.7),\r\n        cursor: \"pointer\",\r\n        padding: theme.spacing(0.5),\r\n        top: 0,\r\n        bottom: 28,\r\n        zIndex: 3,\r\n        opacity: 0\r\n    },\r\n    PaginationButtonLeft: {\r\n        backgroundColor: \"transparent\",\r\n        left: 0\r\n    },\r\n    PaginationButtonRight: {\r\n        right: 0\r\n    },\r\n    PaginationCirclesContainer: {\r\n        display: \"flex\",\r\n        position: \"relative\",\r\n        justifyContent: \"flex-end\",\r\n        marginTop: theme.spacing(2),\r\n        zIndex: 2\r\n    },\r\n    PaginationCircles: {\r\n        width: 12,\r\n        height: 12,\r\n        borderRadius: 12,\r\n        backgroundColor: theme.palette.background.paper,\r\n        marginLeft: theme.spacing(1),\r\n        cursor: \"pointer\",\r\n        transition: theme.transitions.create(['width', 'background-color'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: \"200ms\",\r\n        }),\r\n        ['@media (hover: hover) and (pointer: fine)']: {\r\n            '&:hover': {\r\n                backgroundColor: theme.palette.primary.main\r\n            }\r\n        }\r\n    },\r\n    PaginationCirclesActive: {\r\n        width: 36,\r\n        backgroundColor: theme.palette.primary.main\r\n    }\r\n}))\r\n\r\nexport default function FeaturedContainer(props) {\r\n    const { loading } = props\r\n    const [list, setList] = useState([])\r\n    const [active, setActive] = useState(0)\r\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true)\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        setList(props.list)\r\n    }, [props.list])\r\n\r\n    function handleNextPage() {\r\n        setIsAutoScrollActive(false)\r\n        setActive((active + 1) % list.length)\r\n        setTimeout(() => {\r\n            setIsAutoScrollActive(true)\r\n        }, 200)\r\n    }\r\n\r\n    function handlePreviousPage() {\r\n        setIsAutoScrollActive(false)\r\n        if (active === 0) setActive(list.length - 1)\r\n        else setActive((active - 1) % list.length)\r\n        setTimeout(() => {\r\n            setIsAutoScrollActive(true)\r\n        }, 200)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box className={classes.FeaturedContainer}>\r\n                {loading ?\r\n                    <>\r\n                        <FeaturedLoading />\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <ReactInterval timeout={5000} enabled={isAutoScrollActive}\r\n                            callback={handleNextPage} />\r\n                        <Swipeable\r\n                            onSwipedLeft={handleNextPage}\r\n                            onSwipedRight={handlePreviousPage}>\r\n                            <div\r\n                                unselectable\r\n                                onMouseEnter={() => setIsAutoScrollActive(false)}\r\n                                onMouseLeave={() => setIsAutoScrollActive(true)}\r\n                                className={`${classes.FeaturedComponent} unselectable`}>\r\n                                <div className={classes.PaginationButtonContainer}>\r\n                                    <div onClick={handlePreviousPage} className={`${classes.PaginationButton} ${classes.PaginationButtonLeft}`}>\r\n                                        <NavigateBefore />\r\n                                    </div>\r\n                                    <div onClick={handleNextPage} className={`${classes.PaginationButton} ${classes.PaginationButtonRight}`}>\r\n                                        <NavigateNext />\r\n                                    </div>\r\n                                </div>\r\n                                {list.map((l, i) => (\r\n                                    <Featured key={i + \" featured\"} {...l} index={i} display={i === active} />\r\n                                ))}\r\n                            </div>\r\n                        </Swipeable>\r\n                        <Box className={classes.PaginationCirclesContainer}>\r\n                            {list.map((c, i) => (\r\n                                <div key={i + \"featured\"} onClick={() => {\r\n                                    setIsAutoScrollActive(false)\r\n                                    setActive(i)\r\n                                    setTimeout(() => {\r\n                                        setIsAutoScrollActive(true)\r\n                                    }, 200)\r\n                                }}>\r\n                                    <div className={clsx(classes.PaginationCircles, {\r\n                                        [classes.PaginationCirclesActive]: i === active\r\n                                    })} />\r\n                                </div>\r\n                            ))}\r\n                        </Box>\r\n                    </>}\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nFeaturedContainer.propTypes = {\r\n    list: PropTypes.array.isRequired,\r\n    loading: PropTypes.bool.isRequired\r\n}","C:\\Users\\aybertocarlos\\Desktop\\superduperprojects\\FFs\\front-end\\src\\components\\index\\featured\\featured.js",["323"],"import React, { useState } from 'react'\r\nimport { useGlobal } from 'reactn'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport { Link } from 'react-router-dom'\r\nimport { animePage } from '../../../config/front-routes'\r\nimport { contentHeader, contentLogo } from '../../../config/api-routes'\r\n\r\nimport { HeaderPlaceholder } from '../../../config/theming/images'\r\n\r\nimport { makeStyles, Typography, fade } from '@material-ui/core'\r\nimport { Skeleton } from '@material-ui/lab'\r\nimport Dotdotdot from 'react-dotdotdot'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    Container: {\r\n        position: \"relative\",\r\n        display: \"none\"\r\n    },\r\n    ContainerActive: {\r\n        display: \"block\"\r\n    },\r\n    ImageContainer: {\r\n        position: \"relative\",\r\n        paddingBottom: \"35%\",\r\n        overflow: \"hidden\",\r\n        '& img': {\r\n            position: \"absolute\",\r\n            objectFit: \"cover\",\r\n            width: \"100%\",\r\n            height: \"100%\"\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            paddingBottom: \"80%\",\r\n\r\n            '& img': {\r\n                height: \"100%\",\r\n                marginTop: 0\r\n            }\r\n        }\r\n    },\r\n    InfoContainer: {\r\n        position: \"absolute\",\r\n        zIndex: 2,\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: \"35%\",\r\n        backgroundColor: fade(theme.palette.background.default, 0.7),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(4),\r\n        '& h1': {\r\n            fontSize: \"4.8rem\",\r\n            lineHeight: \"3.6rem\"\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            backgroundColor: \"transparent\",\r\n            width: \"100%\"\r\n        }\r\n    },\r\n    LogoContainer: {\r\n        maxWidth: 400,\r\n        width: \"100%\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxWidth: 300\r\n        }\r\n    },\r\n    SynopsisContainer: {\r\n        display: \"block\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            display: \"none\"\r\n        }\r\n    },\r\n    GenresContainer: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        '& span': {\r\n            marginRight: 5,\r\n        }\r\n    },\r\n    GenreList: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    GenreItem: {\r\n        padding: `2px ${theme.spacing(1)}px`,\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        marginRight: theme.spacing(1),\r\n        marginTop: theme.spacing(1),\r\n        borderRadius: theme.overrides.defaultBorderRadius,\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginRight: theme.spacing(1),\r\n            marginTop: theme.spacing(1),\r\n            padding: 4\r\n        }\r\n    }\r\n}))\r\n\r\nexport function FeaturedLoading() {\r\n    const classes = useStyles()\r\n    return (\r\n        <>\r\n            <div className={[classes.Container, classes.ContainerActive]}>\r\n                <Skeleton variant=\"rect\" width=\"100%\" style={{ paddingBottom: \"35%\" }} />\r\n                <div className={classes.InfoContainer}>\r\n                    <Skeleton variant=\"text\" width=\"50%\" height={100} animation=\"wave\" />\r\n                    <Typography variant=\"h5\" component=\"ul\" className={classes.GenreList}>\r\n                        <Skeleton variant=\"text\" width={80} height={40} animation=\"wave\" className={classes.GenreItem} />\r\n                        <Skeleton variant=\"text\" width={80} height={40} animation=\"wave\" className={classes.GenreItem} />\r\n                        <Skeleton variant=\"text\" width={80} height={40} animation=\"wave\" className={classes.GenreItem} />\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default function Featured(props) {\r\n    const { name, slug, genres, display, synopsis } = props\r\n    const classes = useStyles(props)\r\n    const [logoError, setLogoError] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            <Link to={animePage(slug)}>\r\n                <div className={clsx(classes.Container, {\r\n                    [classes.ContainerActive]: display,\r\n                })}>\r\n                    <div className={classes.ImageContainer}>\r\n                        <img src={contentHeader(\"anime\", slug)} onError={img => {\r\n                            img.target.onerror = null\r\n                            img.target.src = HeaderPlaceholder\r\n                        }} alt=\"\" />\r\n                    </div>\r\n                    <div className={classes.InfoContainer}>\r\n                        {logoError ?\r\n                            <Typography variant=\"h2\">\r\n                                <Dotdotdot clamp={2} useNativeClamp>\r\n                                    {name.toUpperCase()}\r\n                                </Dotdotdot>\r\n                            </Typography>\r\n                            : <img\r\n                                className={classes.LogoContainer}\r\n                                src={contentLogo(\"anime\", slug)}\r\n                                onError={_ => {\r\n                                    setLogoError(true)\r\n                                }}\r\n                                alt=\"\"\r\n                                title={`${name} logo`} />}\r\n                        <div className={classes.SynopsisContainer}>\r\n                            <Dotdotdot clamp={4} useNativeClamp>\r\n                                <Typography variant=\"body1\">\r\n                                    {synopsis.toUpperCase()}\r\n                                </Typography>\r\n                            </Dotdotdot>\r\n                        </div>\r\n                        <Typography variant=\"body2\" component=\"ul\" className={classes.GenreList}>\r\n                            {genres.split(',').map(genre => <li key={name + genre} className={classes.GenreItem}>{genre}</li>)}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </>\r\n    )\r\n}\r\n\r\nFeatured.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n    slug: PropTypes.string.isRequired,\r\n    premiered: PropTypes.string,\r\n    genres: PropTypes.string.isRequired,\r\n    version: PropTypes.string.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    display: PropTypes.bool.isRequired\r\n}",{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","replacedBy":"327"},{"ruleId":"328","severity":1,"message":"329","line":94,"column":17,"nodeType":"330","messageId":"331","endLine":96,"endColumn":18,"fix":"332"},{"ruleId":"333","severity":1,"message":"334","line":65,"column":1,"nodeType":"335","endLine":85,"endColumn":2},{"ruleId":"336","severity":1,"message":"337","line":49,"column":8,"nodeType":"338","endLine":49,"endColumn":10,"suggestions":"339"},{"ruleId":"336","severity":1,"message":"340","line":92,"column":8,"nodeType":"338","endLine":92,"endColumn":10,"suggestions":"341"},{"ruleId":"336","severity":1,"message":"342","line":63,"column":8,"nodeType":"338","endLine":63,"endColumn":21,"suggestions":"343"},{"ruleId":"333","severity":1,"message":"334","line":15,"column":1,"nodeType":"335","endLine":95,"endColumn":2},{"ruleId":"333","severity":1,"message":"334","line":15,"column":1,"nodeType":"335","endLine":77,"endColumn":2},{"ruleId":"344","severity":1,"message":"345","line":10,"column":116,"nodeType":"346","messageId":"347","endLine":10,"endColumn":126},{"ruleId":"336","severity":1,"message":"348","line":84,"column":8,"nodeType":"338","endLine":84,"endColumn":27,"suggestions":"349"},{"ruleId":"350","severity":1,"message":"351","line":90,"column":83,"nodeType":"352","messageId":"353","endLine":90,"endColumn":85},{"ruleId":"336","severity":1,"message":"354","line":115,"column":8,"nodeType":"338","endLine":115,"endColumn":10,"suggestions":"355"},{"ruleId":"344","severity":1,"message":"356","line":398,"column":12,"nodeType":"346","messageId":"347","endLine":398,"endColumn":26},{"ruleId":"344","severity":1,"message":"357","line":398,"column":28,"nodeType":"346","messageId":"347","endLine":398,"endColumn":45},{"ruleId":"336","severity":1,"message":"354","line":451,"column":8,"nodeType":"338","endLine":451,"endColumn":10,"suggestions":"358"},{"ruleId":"359","severity":1,"message":"360","line":815,"column":87,"nodeType":"361","messageId":"362","endLine":815,"endColumn":88,"suggestions":"363"},{"ruleId":"359","severity":1,"message":"364","line":815,"column":89,"nodeType":"361","messageId":"362","endLine":815,"endColumn":90,"suggestions":"365"},{"ruleId":"333","severity":1,"message":"334","line":5,"column":1,"nodeType":"335","endLine":28,"endColumn":2},{"ruleId":"344","severity":1,"message":"366","line":2,"column":10,"nodeType":"346","messageId":"347","endLine":2,"endColumn":16},{"ruleId":"336","severity":1,"message":"367","line":117,"column":8,"nodeType":"338","endLine":117,"endColumn":10,"suggestions":"368"},{"ruleId":"336","severity":1,"message":"369","line":53,"column":8,"nodeType":"338","endLine":53,"endColumn":26,"suggestions":"370"},{"ruleId":"350","severity":1,"message":"351","line":63,"column":50,"nodeType":"371","messageId":"372","endLine":63,"endColumn":56},{"ruleId":"333","severity":1,"message":"373","line":25,"column":1,"nodeType":"335","endLine":32,"endColumn":2},{"ruleId":"324","replacedBy":"374"},{"ruleId":"326","replacedBy":"375"},{"ruleId":"344","severity":1,"message":"376","line":3,"column":10,"nodeType":"346","messageId":"347","endLine":3,"endColumn":24},{"ruleId":"377","severity":1,"message":"378","line":86,"column":85,"nodeType":"379","endLine":86,"endColumn":126},{"ruleId":"377","severity":1,"message":"378","line":87,"column":85,"nodeType":"379","endLine":87,"endColumn":126},{"ruleId":"344","severity":1,"message":"380","line":53,"column":13,"nodeType":"346","messageId":"347","endLine":53,"endColumn":23},{"ruleId":"333","severity":1,"message":"381","line":60,"column":1,"nodeType":"335","endLine":96,"endColumn":2},{"ruleId":"328","severity":1,"message":"382","line":72,"column":9,"nodeType":"330","messageId":"331","endLine":76,"endColumn":10,"fix":"383"},{"ruleId":"344","severity":1,"message":"384","line":2,"column":10,"nodeType":"346","messageId":"347","endLine":2,"endColumn":19},"no-native-reassign",["385"],"no-negated-in-lhs",["386"],"no-useless-computed-key","Unnecessarily computed property ['@media (min-width:600px)'] found.","Property","unnecessarilyComputedProperty",{"range":"387","text":"388"},"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.hash'. Either include it or remove the dependency array.","ArrayExpression",["389"],"React Hook useEffect has a missing dependency: 'props.match.params'. Either include it or remove the dependency array.",["390"],"React Hook useEffect has a missing dependency: 'calendarRawData'. Either include it or remove the dependency array.",["391"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 't'. Either include it or remove the dependency array.",["392"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'mal_link'. Either include it or remove the dependency array.",["393"],"'jikanStaffData' is assigned a value but never used.","'setJikanStaffData' is assigned a value but never used.",["394"],"no-useless-escape","Unnecessary escape character: \\&.","Literal","unnecessaryEscape",["395","396"],"Unnecessary escape character: \\?.",["397","398"],"'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'setSelectedDay' and 'todayDate'. Either include them or remove the dependency array.",["399"],"React Hook useEffect has a missing dependency: 'props.content_type'. Either include it or remove the dependency array.",["400"],"ReturnStatement","expectedReturnValue","Assign array to a variable before exporting as module default",["385"],["386"],"'useTranslation' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'manga_name' is assigned a value but never used.","Assign arrow function to a variable before exporting as module default","Unnecessarily computed property ['@media (hover: hover) and (pointer: fine)'] found.",{"range":"401","text":"402"},"'useGlobal' is defined but never used.","no-global-assign","no-unsafe-negation",[2473,2501],"'@media (min-width:600px)'",{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"411","fix":"413"},{"messageId":"414","fix":"415","desc":"416"},{"messageId":"417","fix":"418","desc":"419"},{"messageId":"414","fix":"420","desc":"416"},{"messageId":"417","fix":"421","desc":"419"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},[2181,2226],"'@media (hover: hover) and (pointer: fine)'","Update the dependencies array to be: [props.match.params.hash]",{"range":"426","text":"427"},"Update the dependencies array to be: [props.match.params]",{"range":"428","text":"429"},"Update the dependencies array to be: [calendarRawData, selectedDay]",{"range":"430","text":"431"},"Update the dependencies array to be: [settings.language, t]",{"range":"432","text":"433"},"Update the dependencies array to be: [mal_link]",{"range":"434","text":"435"},{"range":"436","text":"435"},"removeEscape",{"range":"437","text":"438"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"439","text":"440"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"441","text":"438"},{"range":"442","text":"440"},"Update the dependencies array to be: [setSelectedDay, todayDate]",{"range":"443","text":"444"},"Update the dependencies array to be: [props.content_id, props.content_type]",{"range":"445","text":"446"},[1594,1596],"[props.match.params.hash]",[3499,3501],"[props.match.params]",[1943,1956],"[calendarRawData, selectedDay]",[3494,3513],"[settings.language, t]",[4516,4518],"[mal_link]",[21141,21143],[38613,38614],"",[38613,38613],"\\",[38615,38616],[38615,38615],[3477,3479],"[setSelectedDay, todayDate]",[1718,1736],"[props.content_id, props.content_type]"]